"use strict";(self.webpackChunkportfolio_v2=self.webpackChunkportfolio_v2||[]).push([[789],{5789:(t,e,i)=>{i.d(e,{AO:()=>n,BQ:()=>Wt,F5:()=>ce,JO:()=>de,aL:()=>ue,kp:()=>he,q3:()=>ps,uT:()=>P,xu:()=>B});class s{constructor(t){void 0===t&&(t=[0,0,0,0,0,0,0,0,0]),this.elements=t}identity(){const t=this.elements;t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=1,t[5]=0,t[6]=0,t[7]=0,t[8]=1}setZero(){const t=this.elements;t[0]=0,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=0,t[6]=0,t[7]=0,t[8]=0}setTrace(t){const e=this.elements;e[0]=t.x,e[4]=t.y,e[8]=t.z}getTrace(t){void 0===t&&(t=new n);const e=this.elements;return t.x=e[0],t.y=e[4],t.z=e[8],t}vmult(t,e){void 0===e&&(e=new n);const i=this.elements,s=t.x,o=t.y,r=t.z;return e.x=i[0]*s+i[1]*o+i[2]*r,e.y=i[3]*s+i[4]*o+i[5]*r,e.z=i[6]*s+i[7]*o+i[8]*r,e}smult(t){for(let e=0;e<this.elements.length;e++)this.elements[e]*=t}mmult(t,e){void 0===e&&(e=new s);const i=this.elements,o=t.elements,n=e.elements,r=i[0],a=i[1],l=i[2],h=i[3],c=i[4],u=i[5],d=i[6],p=i[7],y=i[8],v=o[0],f=o[1],m=o[2],w=o[3],g=o[4],x=o[5],b=o[6],E=o[7],z=o[8];return n[0]=r*v+a*w+l*b,n[1]=r*f+a*g+l*E,n[2]=r*m+a*x+l*z,n[3]=h*v+c*w+u*b,n[4]=h*f+c*g+u*E,n[5]=h*m+c*x+u*z,n[6]=d*v+p*w+y*b,n[7]=d*f+p*g+y*E,n[8]=d*m+p*x+y*z,e}scale(t,e){void 0===e&&(e=new s);const i=this.elements,o=e.elements;for(let s=0;3!==s;s++)o[3*s+0]=t.x*i[3*s+0],o[3*s+1]=t.y*i[3*s+1],o[3*s+2]=t.z*i[3*s+2];return e}solve(t,e){void 0===e&&(e=new n);const i=[];let s,o;for(s=0;s<12;s++)i.push(0);for(s=0;s<3;s++)for(o=0;o<3;o++)i[s+4*o]=this.elements[s+3*o];i[3]=t.x,i[7]=t.y,i[11]=t.z;let r=3;const a=r;let l;let h;do{if(s=a-r,0===i[s+4*s])for(o=s+1;o<a;o++)if(0!==i[s+4*o]){l=4;do{h=4-l,i[h+4*s]+=i[h+4*o]}while(--l);break}if(0!==i[s+4*s])for(o=s+1;o<a;o++){const t=i[s+4*o]/i[s+4*s];l=4;do{h=4-l,i[h+4*o]=h<=s?0:i[h+4*o]-i[h+4*s]*t}while(--l)}}while(--r);if(e.z=i[11]/i[10],e.y=(i[7]-i[6]*e.z)/i[5],e.x=(i[3]-i[2]*e.z-i[1]*e.y)/i[0],isNaN(e.x)||isNaN(e.y)||isNaN(e.z)||e.x===1/0||e.y===1/0||e.z===1/0)throw"Could not solve equation! Got x=[".concat(e.toString(),"], b=[").concat(t.toString(),"], A=[").concat(this.toString(),"]");return e}e(t,e,i){if(void 0===i)return this.elements[e+3*t];this.elements[e+3*t]=i}copy(t){for(let e=0;e<t.elements.length;e++)this.elements[e]=t.elements[e];return this}toString(){let t="";for(let e=0;e<9;e++)t+=this.elements[e]+",";return t}reverse(t){void 0===t&&(t=new s);const e=o;let i,n;for(i=0;i<3;i++)for(n=0;n<3;n++)e[i+6*n]=this.elements[i+3*n];e[3]=1,e[9]=0,e[15]=0,e[4]=0,e[10]=1,e[16]=0,e[5]=0,e[11]=0,e[17]=1;let r=3;const a=r;let l;let h;do{if(i=a-r,0===e[i+6*i])for(n=i+1;n<a;n++)if(0!==e[i+6*n]){l=6;do{h=6-l,e[h+6*i]+=e[h+6*n]}while(--l);break}if(0!==e[i+6*i])for(n=i+1;n<a;n++){const t=e[i+6*n]/e[i+6*i];l=6;do{h=6-l,e[h+6*n]=h<=i?0:e[h+6*n]-e[h+6*i]*t}while(--l)}}while(--r);i=2;do{n=i-1;do{const t=e[i+6*n]/e[i+6*i];l=6;do{h=6-l,e[h+6*n]=e[h+6*n]-e[h+6*i]*t}while(--l)}while(n--)}while(--i);i=2;do{const t=1/e[i+6*i];l=6;do{h=6-l,e[h+6*i]=e[h+6*i]*t}while(--l)}while(i--);i=2;do{n=2;do{if(h=e[3+n+6*i],isNaN(h)||h===1/0)throw"Could not reverse! A=[".concat(this.toString(),"]");t.e(i,n,h)}while(n--)}while(i--);return t}setRotationFromQuaternion(t){const e=t.x,i=t.y,s=t.z,o=t.w,n=e+e,r=i+i,a=s+s,l=e*n,h=e*r,c=e*a,u=i*r,d=i*a,p=s*a,y=o*n,v=o*r,f=o*a,m=this.elements;return m[0]=1-(u+p),m[1]=h-f,m[2]=c+v,m[3]=h+f,m[4]=1-(l+p),m[5]=d-y,m[6]=c-v,m[7]=d+y,m[8]=1-(l+u),this}transpose(t){void 0===t&&(t=new s);const e=this.elements,i=t.elements;let o;return i[0]=e[0],i[4]=e[4],i[8]=e[8],o=e[1],i[1]=e[3],i[3]=o,o=e[2],i[2]=e[6],i[6]=o,o=e[5],i[5]=e[7],i[7]=o,t}}const o=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];class n{constructor(t,e,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),this.x=t,this.y=e,this.z=i}cross(t,e){void 0===e&&(e=new n);const i=t.x,s=t.y,o=t.z,r=this.x,a=this.y,l=this.z;return e.x=a*o-l*s,e.y=l*i-r*o,e.z=r*s-a*i,e}set(t,e,i){return this.x=t,this.y=e,this.z=i,this}setZero(){this.x=this.y=this.z=0}vadd(t,e){if(!e)return new n(this.x+t.x,this.y+t.y,this.z+t.z);e.x=t.x+this.x,e.y=t.y+this.y,e.z=t.z+this.z}vsub(t,e){if(!e)return new n(this.x-t.x,this.y-t.y,this.z-t.z);e.x=this.x-t.x,e.y=this.y-t.y,e.z=this.z-t.z}crossmat(){return new s([0,-this.z,this.y,this.z,0,-this.x,-this.y,this.x,0])}normalize(){const t=this.x,e=this.y,i=this.z,s=Math.sqrt(t*t+e*e+i*i);if(s>0){const t=1/s;this.x*=t,this.y*=t,this.z*=t}else this.x=0,this.y=0,this.z=0;return s}unit(t){void 0===t&&(t=new n);const e=this.x,i=this.y,s=this.z;let o=Math.sqrt(e*e+i*i+s*s);return o>0?(o=1/o,t.x=e*o,t.y=i*o,t.z=s*o):(t.x=1,t.y=0,t.z=0),t}length(){const t=this.x,e=this.y,i=this.z;return Math.sqrt(t*t+e*e+i*i)}lengthSquared(){return this.dot(this)}distanceTo(t){const e=this.x,i=this.y,s=this.z,o=t.x,n=t.y,r=t.z;return Math.sqrt((o-e)*(o-e)+(n-i)*(n-i)+(r-s)*(r-s))}distanceSquared(t){const e=this.x,i=this.y,s=this.z,o=t.x,n=t.y,r=t.z;return(o-e)*(o-e)+(n-i)*(n-i)+(r-s)*(r-s)}scale(t,e){void 0===e&&(e=new n);const i=this.x,s=this.y,o=this.z;return e.x=t*i,e.y=t*s,e.z=t*o,e}vmul(t,e){return void 0===e&&(e=new n),e.x=t.x*this.x,e.y=t.y*this.y,e.z=t.z*this.z,e}addScaledVector(t,e,i){return void 0===i&&(i=new n),i.x=this.x+t*e.x,i.y=this.y+t*e.y,i.z=this.z+t*e.z,i}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}isZero(){return 0===this.x&&0===this.y&&0===this.z}negate(t){return void 0===t&&(t=new n),t.x=-this.x,t.y=-this.y,t.z=-this.z,t}tangents(t,e){const i=this.length();if(i>0){const s=r,o=1/i;s.set(this.x*o,this.y*o,this.z*o);const n=a;Math.abs(s.x)<.9?(n.set(1,0,0),s.cross(n,t)):(n.set(0,1,0),s.cross(n,t)),s.cross(t,e)}else t.set(1,0,0),e.set(0,1,0)}toString(){return"".concat(this.x,",").concat(this.y,",").concat(this.z)}toArray(){return[this.x,this.y,this.z]}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}lerp(t,e,i){const s=this.x,o=this.y,n=this.z;i.x=s+(t.x-s)*e,i.y=o+(t.y-o)*e,i.z=n+(t.z-n)*e}almostEquals(t,e){return void 0===e&&(e=1e-6),!(Math.abs(this.x-t.x)>e||Math.abs(this.y-t.y)>e||Math.abs(this.z-t.z)>e)}almostZero(t){return void 0===t&&(t=1e-6),!(Math.abs(this.x)>t||Math.abs(this.y)>t||Math.abs(this.z)>t)}isAntiparallelTo(t,e){return this.negate(l),l.almostEquals(t,e)}clone(){return new n(this.x,this.y,this.z)}}n.ZERO=new n(0,0,0),n.UNIT_X=new n(1,0,0),n.UNIT_Y=new n(0,1,0),n.UNIT_Z=new n(0,0,1);const r=new n,a=new n,l=new n;class h{constructor(t){void 0===t&&(t={}),this.lowerBound=new n,this.upperBound=new n,t.lowerBound&&this.lowerBound.copy(t.lowerBound),t.upperBound&&this.upperBound.copy(t.upperBound)}setFromPoints(t,e,i,s){const o=this.lowerBound,n=this.upperBound,r=i;o.copy(t[0]),r&&r.vmult(o,o),n.copy(o);for(let a=1;a<t.length;a++){let e=t[a];r&&(r.vmult(e,c),e=c),e.x>n.x&&(n.x=e.x),e.x<o.x&&(o.x=e.x),e.y>n.y&&(n.y=e.y),e.y<o.y&&(o.y=e.y),e.z>n.z&&(n.z=e.z),e.z<o.z&&(o.z=e.z)}return e&&(e.vadd(o,o),e.vadd(n,n)),s&&(o.x-=s,o.y-=s,o.z-=s,n.x+=s,n.y+=s,n.z+=s),this}copy(t){return this.lowerBound.copy(t.lowerBound),this.upperBound.copy(t.upperBound),this}clone(){return(new h).copy(this)}extend(t){this.lowerBound.x=Math.min(this.lowerBound.x,t.lowerBound.x),this.upperBound.x=Math.max(this.upperBound.x,t.upperBound.x),this.lowerBound.y=Math.min(this.lowerBound.y,t.lowerBound.y),this.upperBound.y=Math.max(this.upperBound.y,t.upperBound.y),this.lowerBound.z=Math.min(this.lowerBound.z,t.lowerBound.z),this.upperBound.z=Math.max(this.upperBound.z,t.upperBound.z)}overlaps(t){const e=this.lowerBound,i=this.upperBound,s=t.lowerBound,o=t.upperBound,n=s.x<=i.x&&i.x<=o.x||e.x<=o.x&&o.x<=i.x,r=s.y<=i.y&&i.y<=o.y||e.y<=o.y&&o.y<=i.y,a=s.z<=i.z&&i.z<=o.z||e.z<=o.z&&o.z<=i.z;return n&&r&&a}volume(){const t=this.lowerBound,e=this.upperBound;return(e.x-t.x)*(e.y-t.y)*(e.z-t.z)}contains(t){const e=this.lowerBound,i=this.upperBound,s=t.lowerBound,o=t.upperBound;return e.x<=s.x&&i.x>=o.x&&e.y<=s.y&&i.y>=o.y&&e.z<=s.z&&i.z>=o.z}getCorners(t,e,i,s,o,n,r,a){const l=this.lowerBound,h=this.upperBound;t.copy(l),e.set(h.x,l.y,l.z),i.set(h.x,h.y,l.z),s.set(l.x,h.y,h.z),o.set(h.x,l.y,h.z),n.set(l.x,h.y,l.z),r.set(l.x,l.y,h.z),a.copy(h)}toLocalFrame(t,e){const i=u,s=i[0],o=i[1],n=i[2],r=i[3],a=i[4],l=i[5],h=i[6],c=i[7];this.getCorners(s,o,n,r,a,l,h,c);for(let u=0;8!==u;u++){const e=i[u];t.pointToLocal(e,e)}return e.setFromPoints(i)}toWorldFrame(t,e){const i=u,s=i[0],o=i[1],n=i[2],r=i[3],a=i[4],l=i[5],h=i[6],c=i[7];this.getCorners(s,o,n,r,a,l,h,c);for(let u=0;8!==u;u++){const e=i[u];t.pointToWorld(e,e)}return e.setFromPoints(i)}overlapsRay(t){const{direction:e,from:i}=t,s=1/e.x,o=1/e.y,n=1/e.z,r=(this.lowerBound.x-i.x)*s,a=(this.upperBound.x-i.x)*s,l=(this.lowerBound.y-i.y)*o,h=(this.upperBound.y-i.y)*o,c=(this.lowerBound.z-i.z)*n,u=(this.upperBound.z-i.z)*n,d=Math.max(Math.max(Math.min(r,a),Math.min(l,h)),Math.min(c,u)),p=Math.min(Math.min(Math.max(r,a),Math.max(l,h)),Math.max(c,u));return!(p<0)&&!(d>p)}}const c=new n,u=[new n,new n,new n,new n,new n,new n,new n,new n];class d{constructor(){this.matrix=[]}get(t,e){let{index:i}=t,{index:s}=e;if(s>i){const t=s;s=i,i=t}return this.matrix[(i*(i+1)>>1)+s-1]}set(t,e,i){let{index:s}=t,{index:o}=e;if(o>s){const t=o;o=s,s=t}this.matrix[(s*(s+1)>>1)+o-1]=i?1:0}reset(){for(let t=0,e=this.matrix.length;t!==e;t++)this.matrix[t]=0}setNumObjects(t){this.matrix.length=t*(t-1)>>1}}class p{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const i=this._listeners;return void 0===i[t]&&(i[t]=[]),i[t].includes(e)||i[t].push(e),this}hasEventListener(t,e){if(void 0===this._listeners)return!1;const i=this._listeners;return!(void 0===i[t]||!i[t].includes(e))}hasAnyEventListener(t){if(void 0===this._listeners)return!1;return void 0!==this._listeners[t]}removeEventListener(t,e){if(void 0===this._listeners)return this;const i=this._listeners;if(void 0===i[t])return this;const s=i[t].indexOf(e);return-1!==s&&i[t].splice(s,1),this}dispatchEvent(t){if(void 0===this._listeners)return this;const e=this._listeners[t.type];if(void 0!==e){t.target=this;for(let i=0,s=e.length;i<s;i++)e[i].call(this,t)}return this}}class y{constructor(t,e,i,s){void 0===t&&(t=0),void 0===e&&(e=0),void 0===i&&(i=0),void 0===s&&(s=1),this.x=t,this.y=e,this.z=i,this.w=s}set(t,e,i,s){return this.x=t,this.y=e,this.z=i,this.w=s,this}toString(){return"".concat(this.x,",").concat(this.y,",").concat(this.z,",").concat(this.w)}toArray(){return[this.x,this.y,this.z,this.w]}setFromAxisAngle(t,e){const i=Math.sin(.5*e);return this.x=t.x*i,this.y=t.y*i,this.z=t.z*i,this.w=Math.cos(.5*e),this}toAxisAngle(t){void 0===t&&(t=new n),this.normalize();const e=2*Math.acos(this.w),i=Math.sqrt(1-this.w*this.w);return i<.001?(t.x=this.x,t.y=this.y,t.z=this.z):(t.x=this.x/i,t.y=this.y/i,t.z=this.z/i),[t,e]}setFromVectors(t,e){if(t.isAntiparallelTo(e)){const e=v,i=f;t.tangents(e,i),this.setFromAxisAngle(e,Math.PI)}else{const i=t.cross(e);this.x=i.x,this.y=i.y,this.z=i.z,this.w=Math.sqrt(t.length()**2*e.length()**2)+t.dot(e),this.normalize()}return this}mult(t,e){void 0===e&&(e=new y);const i=this.x,s=this.y,o=this.z,n=this.w,r=t.x,a=t.y,l=t.z,h=t.w;return e.x=i*h+n*r+s*l-o*a,e.y=s*h+n*a+o*r-i*l,e.z=o*h+n*l+i*a-s*r,e.w=n*h-i*r-s*a-o*l,e}inverse(t){void 0===t&&(t=new y);const e=this.x,i=this.y,s=this.z,o=this.w;this.conjugate(t);const n=1/(e*e+i*i+s*s+o*o);return t.x*=n,t.y*=n,t.z*=n,t.w*=n,t}conjugate(t){return void 0===t&&(t=new y),t.x=-this.x,t.y=-this.y,t.z=-this.z,t.w=this.w,t}normalize(){let t=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w);return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(t=1/t,this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}normalizeFast(){const t=(3-(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w))/2;return 0===t?(this.x=0,this.y=0,this.z=0,this.w=0):(this.x*=t,this.y*=t,this.z*=t,this.w*=t),this}vmult(t,e){void 0===e&&(e=new n);const i=t.x,s=t.y,o=t.z,r=this.x,a=this.y,l=this.z,h=this.w,c=h*i+a*o-l*s,u=h*s+l*i-r*o,d=h*o+r*s-a*i,p=-r*i-a*s-l*o;return e.x=c*h+p*-r+u*-l-d*-a,e.y=u*h+p*-a+d*-r-c*-l,e.z=d*h+p*-l+c*-a-u*-r,e}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w,this}toEuler(t,e){let i,s,o;void 0===e&&(e="YZX");const n=this.x,r=this.y,a=this.z,l=this.w;if("YZX"!==e)throw new Error("Euler order ".concat(e," not supported yet."));{const t=n*r+a*l;if(t>.499&&(i=2*Math.atan2(n,l),s=Math.PI/2,o=0),t<-.499&&(i=-2*Math.atan2(n,l),s=-Math.PI/2,o=0),void 0===i){const e=n*n,h=r*r,c=a*a;i=Math.atan2(2*r*l-2*n*a,1-2*h-2*c),s=Math.asin(2*t),o=Math.atan2(2*n*l-2*r*a,1-2*e-2*c)}}t.y=i,t.z=s,t.x=o}setFromEuler(t,e,i,s){void 0===s&&(s="XYZ");const o=Math.cos(t/2),n=Math.cos(e/2),r=Math.cos(i/2),a=Math.sin(t/2),l=Math.sin(e/2),h=Math.sin(i/2);return"XYZ"===s?(this.x=a*n*r+o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r-a*l*h):"YXZ"===s?(this.x=a*n*r+o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r+a*l*h):"ZXY"===s?(this.x=a*n*r-o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r-a*l*h):"ZYX"===s?(this.x=a*n*r-o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r+a*l*h):"YZX"===s?(this.x=a*n*r+o*l*h,this.y=o*l*r+a*n*h,this.z=o*n*h-a*l*r,this.w=o*n*r-a*l*h):"XZY"===s&&(this.x=a*n*r-o*l*h,this.y=o*l*r-a*n*h,this.z=o*n*h+a*l*r,this.w=o*n*r+a*l*h),this}clone(){return new y(this.x,this.y,this.z,this.w)}slerp(t,e,i){void 0===i&&(i=new y);const s=this.x,o=this.y,n=this.z,r=this.w;let a,l,h,c,u,d=t.x,p=t.y,v=t.z,f=t.w;return l=s*d+o*p+n*v+r*f,l<0&&(l=-l,d=-d,p=-p,v=-v,f=-f),1-l>1e-6?(a=Math.acos(l),h=Math.sin(a),c=Math.sin((1-e)*a)/h,u=Math.sin(e*a)/h):(c=1-e,u=e),i.x=c*s+u*d,i.y=c*o+u*p,i.z=c*n+u*v,i.w=c*r+u*f,i}integrate(t,e,i,s){void 0===s&&(s=new y);const o=t.x*i.x,n=t.y*i.y,r=t.z*i.z,a=this.x,l=this.y,h=this.z,c=this.w,u=.5*e;return s.x+=u*(o*c+n*h-r*l),s.y+=u*(n*c+r*a-o*h),s.z+=u*(r*c+o*l-n*a),s.w+=u*(-o*a-n*l-r*h),s}}const v=new n,f=new n;class m{constructor(t){void 0===t&&(t={}),this.id=m.idCounter++,this.type=t.type||0,this.boundingSphereRadius=0,this.collisionResponse=!t.collisionResponse||t.collisionResponse,this.collisionFilterGroup=void 0!==t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask=void 0!==t.collisionFilterMask?t.collisionFilterMask:-1,this.material=t.material?t.material:null,this.body=null}updateBoundingSphereRadius(){throw"computeBoundingSphereRadius() not implemented for shape type ".concat(this.type)}volume(){throw"volume() not implemented for shape type ".concat(this.type)}calculateLocalInertia(t,e){throw"calculateLocalInertia() not implemented for shape type ".concat(this.type)}calculateWorldAABB(t,e,i,s){throw"calculateWorldAABB() not implemented for shape type ".concat(this.type)}}m.idCounter=0,m.types={SPHERE:1,PLANE:2,BOX:4,COMPOUND:8,CONVEXPOLYHEDRON:16,HEIGHTFIELD:32,PARTICLE:64,CYLINDER:128,TRIMESH:256};class w{constructor(t){void 0===t&&(t={}),this.position=new n,this.quaternion=new y,t.position&&this.position.copy(t.position),t.quaternion&&this.quaternion.copy(t.quaternion)}pointToLocal(t,e){return w.pointToLocalFrame(this.position,this.quaternion,t,e)}pointToWorld(t,e){return w.pointToWorldFrame(this.position,this.quaternion,t,e)}vectorToWorldFrame(t,e){return void 0===e&&(e=new n),this.quaternion.vmult(t,e),e}static pointToLocalFrame(t,e,i,s){return void 0===s&&(s=new n),i.vsub(t,s),e.conjugate(g),g.vmult(s,s),s}static pointToWorldFrame(t,e,i,s){return void 0===s&&(s=new n),e.vmult(i,s),s.vadd(t,s),s}static vectorToWorldFrame(t,e,i){return void 0===i&&(i=new n),t.vmult(e,i),i}static vectorToLocalFrame(t,e,i,s){return void 0===s&&(s=new n),e.w*=-1,e.vmult(i,s),e.w*=-1,s}}const g=new y;class x extends m{constructor(t){void 0===t&&(t={});const{vertices:e=[],faces:i=[],normals:s=[],axes:o,boundingSphereRadius:n}=t;super({type:m.types.CONVEXPOLYHEDRON}),this.vertices=e,this.faces=i,this.faceNormals=s,0===this.faceNormals.length&&this.computeNormals(),n?this.boundingSphereRadius=n:this.updateBoundingSphereRadius(),this.worldVertices=[],this.worldVerticesNeedsUpdate=!0,this.worldFaceNormals=[],this.worldFaceNormalsNeedsUpdate=!0,this.uniqueAxes=o?o.slice():null,this.uniqueEdges=[],this.computeEdges()}computeEdges(){const t=this.faces,e=this.vertices,i=this.uniqueEdges;i.length=0;const s=new n;for(let o=0;o!==t.length;o++){const n=t[o],r=n.length;for(let t=0;t!==r;t++){const o=(t+1)%r;e[n[t]].vsub(e[n[o]],s),s.normalize();let a=!1;for(let t=0;t!==i.length;t++)if(i[t].almostEquals(s)||i[t].almostEquals(s)){a=!0;break}a||i.push(s.clone())}}}computeNormals(){this.faceNormals.length=this.faces.length;for(let t=0;t<this.faces.length;t++){for(let s=0;s<this.faces[t].length;s++)if(!this.vertices[this.faces[t][s]])throw new Error("Vertex ".concat(this.faces[t][s]," not found!"));const e=this.faceNormals[t]||new n;this.getFaceNormal(t,e),e.negate(e),this.faceNormals[t]=e;const i=this.vertices[this.faces[t][0]];if(e.dot(i)<0){console.error(".faceNormals[".concat(t,"] = Vec3(").concat(e.toString(),") looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule."));for(let e=0;e<this.faces[t].length;e++)console.warn(".vertices[".concat(this.faces[t][e],"] = Vec3(").concat(this.vertices[this.faces[t][e]].toString(),")"))}}}getFaceNormal(t,e){const i=this.faces[t],s=this.vertices[i[0]],o=this.vertices[i[1]],n=this.vertices[i[2]];x.computeNormal(s,o,n,e)}static computeNormal(t,e,i,s){const o=new n,r=new n;e.vsub(t,r),i.vsub(e,o),o.cross(r,s),s.isZero()||s.normalize()}clipAgainstHull(t,e,i,s,o,r,a,l,h){const c=new n;let u=-1,d=-Number.MAX_VALUE;for(let n=0;n<i.faces.length;n++){c.copy(i.faceNormals[n]),o.vmult(c,c);const t=c.dot(r);t>d&&(d=t,u=n)}const p=[];for(let y=0;y<i.faces[u].length;y++){const t=i.vertices[i.faces[u][y]],e=new n;e.copy(t),o.vmult(e,e),s.vadd(e,e),p.push(e)}u>=0&&this.clipFaceAgainstHull(r,t,e,p,a,l,h)}findSeparatingAxis(t,e,i,s,o,r,a,l){const h=new n,c=new n,u=new n,d=new n,p=new n,y=new n;let v=Number.MAX_VALUE;const f=this;if(f.uniqueAxes)for(let n=0;n!==f.uniqueAxes.length;n++){i.vmult(f.uniqueAxes[n],h);const a=f.testSepAxis(h,t,e,i,s,o);if(!1===a)return!1;a<v&&(v=a,r.copy(h))}else{const n=a?a.length:f.faces.length;for(let l=0;l<n;l++){const n=a?a[l]:l;h.copy(f.faceNormals[n]),i.vmult(h,h);const c=f.testSepAxis(h,t,e,i,s,o);if(!1===c)return!1;c<v&&(v=c,r.copy(h))}}if(t.uniqueAxes)for(let n=0;n!==t.uniqueAxes.length;n++){o.vmult(t.uniqueAxes[n],c);const a=f.testSepAxis(c,t,e,i,s,o);if(!1===a)return!1;a<v&&(v=a,r.copy(c))}else{const n=l?l.length:t.faces.length;for(let a=0;a<n;a++){const n=l?l[a]:a;c.copy(t.faceNormals[n]),o.vmult(c,c);const h=f.testSepAxis(c,t,e,i,s,o);if(!1===h)return!1;h<v&&(v=h,r.copy(c))}}for(let n=0;n!==f.uniqueEdges.length;n++){i.vmult(f.uniqueEdges[n],d);for(let n=0;n!==t.uniqueEdges.length;n++)if(o.vmult(t.uniqueEdges[n],p),d.cross(p,y),!y.almostZero()){y.normalize();const n=f.testSepAxis(y,t,e,i,s,o);if(!1===n)return!1;n<v&&(v=n,r.copy(y))}}return s.vsub(e,u),u.dot(r)>0&&r.negate(r),!0}testSepAxis(t,e,i,s,o,n){x.project(this,t,i,s,b),x.project(e,t,o,n,E);const r=b[0],a=b[1],l=E[0],h=E[1];if(r<h||l<a)return!1;const c=r-h,u=l-a;return c<u?c:u}calculateLocalInertia(t,e){const i=new n,s=new n;this.computeLocalAABB(s,i);const o=i.x-s.x,r=i.y-s.y,a=i.z-s.z;e.x=1/12*t*(2*r*2*r+2*a*2*a),e.y=1/12*t*(2*o*2*o+2*a*2*a),e.z=1/12*t*(2*r*2*r+2*o*2*o)}getPlaneConstantOfFace(t){const e=this.faces[t],i=this.faceNormals[t],s=this.vertices[e[0]];return-i.dot(s)}clipFaceAgainstHull(t,e,i,s,o,r,a){const l=new n,h=new n,c=new n,u=new n,d=new n,p=new n,y=new n,v=new n,f=this,m=s,w=[];let g=-1,x=Number.MAX_VALUE;for(let n=0;n<f.faces.length;n++){l.copy(f.faceNormals[n]),i.vmult(l,l);const e=l.dot(t);e<x&&(x=e,g=n)}if(g<0)return;const b=f.faces[g];b.connectedFaces=[];for(let n=0;n<f.faces.length;n++)for(let t=0;t<f.faces[n].length;t++)-1!==b.indexOf(f.faces[n][t])&&n!==g&&-1===b.connectedFaces.indexOf(n)&&b.connectedFaces.push(n);const E=b.length;for(let n=0;n<E;n++){const t=f.vertices[b[n]],s=f.vertices[b[(n+1)%E]];t.vsub(s,h),c.copy(h),i.vmult(c,c),e.vadd(c,c),u.copy(this.faceNormals[g]),i.vmult(u,u),e.vadd(u,u),c.cross(u,d),d.negate(d),p.copy(t),i.vmult(p,p),e.vadd(p,p);const o=b.connectedFaces[n];y.copy(this.faceNormals[o]);const r=this.getPlaneConstantOfFace(o);v.copy(y),i.vmult(v,v);const a=r-v.dot(e);for(this.clipFaceAgainstPlane(m,w,v,a);m.length;)m.shift();for(;w.length;)m.push(w.shift())}y.copy(this.faceNormals[g]);const z=this.getPlaneConstantOfFace(g);v.copy(y),i.vmult(v,v);const S=z-v.dot(e);for(let n=0;n<m.length;n++){let t=v.dot(m[n])+S;if(t<=o&&(console.log("clamped: depth=".concat(t," to minDist=").concat(o)),t=o),t<=r){const e=m[n];if(t<=1e-6){const i={point:e,normal:v,depth:t};a.push(i)}}}}clipFaceAgainstPlane(t,e,i,s){let o,r;const a=t.length;if(a<2)return e;let l=t[t.length-1],h=t[0];o=i.dot(l)+s;for(let c=0;c<a;c++){if(h=t[c],r=i.dot(h)+s,o<0)if(r<0){const t=new n;t.copy(h),e.push(t)}else{const t=new n;l.lerp(h,o/(o-r),t),e.push(t)}else if(r<0){const t=new n;l.lerp(h,o/(o-r),t),e.push(t),e.push(h)}l=h,o=r}return e}computeWorldVertices(t,e){for(;this.worldVertices.length<this.vertices.length;)this.worldVertices.push(new n);const i=this.vertices,s=this.worldVertices;for(let o=0;o!==this.vertices.length;o++)e.vmult(i[o],s[o]),t.vadd(s[o],s[o]);this.worldVerticesNeedsUpdate=!1}computeLocalAABB(t,e){const i=this.vertices;t.set(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),e.set(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(let s=0;s<this.vertices.length;s++){const o=i[s];o.x<t.x?t.x=o.x:o.x>e.x&&(e.x=o.x),o.y<t.y?t.y=o.y:o.y>e.y&&(e.y=o.y),o.z<t.z?t.z=o.z:o.z>e.z&&(e.z=o.z)}}computeWorldFaceNormals(t){const e=this.faceNormals.length;for(;this.worldFaceNormals.length<e;)this.worldFaceNormals.push(new n);const i=this.faceNormals,s=this.worldFaceNormals;for(let o=0;o!==e;o++)t.vmult(i[o],s[o]);this.worldFaceNormalsNeedsUpdate=!1}updateBoundingSphereRadius(){let t=0;const e=this.vertices;for(let i=0;i!==e.length;i++){const s=e[i].lengthSquared();s>t&&(t=s)}this.boundingSphereRadius=Math.sqrt(t)}calculateWorldAABB(t,e,i,s){const o=this.vertices;let r,a,l,h,c,u,d=new n;for(let n=0;n<o.length;n++){d.copy(o[n]),e.vmult(d,d),t.vadd(d,d);const i=d;(void 0===r||i.x<r)&&(r=i.x),(void 0===h||i.x>h)&&(h=i.x),(void 0===a||i.y<a)&&(a=i.y),(void 0===c||i.y>c)&&(c=i.y),(void 0===l||i.z<l)&&(l=i.z),(void 0===u||i.z>u)&&(u=i.z)}i.set(r,a,l),s.set(h,c,u)}volume(){return 4*Math.PI*this.boundingSphereRadius/3}getAveragePointLocal(t){void 0===t&&(t=new n);const e=this.vertices;for(let i=0;i<e.length;i++)t.vadd(e[i],t);return t.scale(1/e.length,t),t}transformAllPoints(t,e){const i=this.vertices.length,s=this.vertices;if(e){for(let t=0;t<i;t++){const i=s[t];e.vmult(i,i)}for(let t=0;t<this.faceNormals.length;t++){const i=this.faceNormals[t];e.vmult(i,i)}}if(t)for(let o=0;o<i;o++){const e=s[o];e.vadd(t,e)}}pointIsInside(t){const e=this.vertices,i=this.faces,s=this.faceNormals,o=new n;this.getAveragePointLocal(o);for(let r=0;r<this.faces.length;r++){let a=s[r];const l=e[i[r][0]],h=new n;t.vsub(l,h);const c=a.dot(h),u=new n;o.vsub(l,u);const d=a.dot(u);if(c<0&&d>0||c>0&&d<0)return!1}return-1}static project(t,e,i,s,o){const n=t.vertices.length,r=z;let a=0,l=0;const h=S,c=t.vertices;h.setZero(),w.vectorToLocalFrame(i,s,e,r),w.pointToLocalFrame(i,s,h,h);const u=h.dot(r);l=a=c[0].dot(r);for(let d=1;d<n;d++){const t=c[d].dot(r);t>a&&(a=t),t<l&&(l=t)}if(l-=u,a-=u,l>a){const t=l;l=a,a=t}o[0]=a,o[1]=l}}const b=[],E=[],z=(new n,new n),S=new n;class B extends m{constructor(t){super({type:m.types.BOX}),this.halfExtents=t,this.convexPolyhedronRepresentation=null,this.updateConvexPolyhedronRepresentation(),this.updateBoundingSphereRadius()}updateConvexPolyhedronRepresentation(){const t=this.halfExtents.x,e=this.halfExtents.y,i=this.halfExtents.z,s=n,o=[new s(-t,-e,-i),new s(t,-e,-i),new s(t,e,-i),new s(-t,e,-i),new s(-t,-e,i),new s(t,-e,i),new s(t,e,i),new s(-t,e,i)],r=[new s(0,0,1),new s(0,1,0),new s(1,0,0)],a=new x({vertices:o,faces:[[3,2,1,0],[4,5,6,7],[5,4,0,1],[2,3,7,6],[0,4,7,3],[1,2,6,5]],axes:r});this.convexPolyhedronRepresentation=a,a.material=this.material}calculateLocalInertia(t,e){return void 0===e&&(e=new n),B.calculateInertia(this.halfExtents,t,e),e}static calculateInertia(t,e,i){const s=t;i.x=1/12*e*(2*s.y*2*s.y+2*s.z*2*s.z),i.y=1/12*e*(2*s.x*2*s.x+2*s.z*2*s.z),i.z=1/12*e*(2*s.y*2*s.y+2*s.x*2*s.x)}getSideNormals(t,e){const i=t,s=this.halfExtents;if(i[0].set(s.x,0,0),i[1].set(0,s.y,0),i[2].set(0,0,s.z),i[3].set(-s.x,0,0),i[4].set(0,-s.y,0),i[5].set(0,0,-s.z),void 0!==e)for(let o=0;o!==i.length;o++)e.vmult(i[o],i[o]);return i}volume(){return 8*this.halfExtents.x*this.halfExtents.y*this.halfExtents.z}updateBoundingSphereRadius(){this.boundingSphereRadius=this.halfExtents.length()}forEachWorldCorner(t,e,i){const s=this.halfExtents,o=[[s.x,s.y,s.z],[-s.x,s.y,s.z],[-s.x,-s.y,s.z],[-s.x,-s.y,-s.z],[s.x,-s.y,-s.z],[s.x,s.y,-s.z],[-s.x,s.y,-s.z],[s.x,-s.y,s.z]];for(let n=0;n<o.length;n++)A.set(o[n][0],o[n][1],o[n][2]),e.vmult(A,A),t.vadd(A,A),i(A.x,A.y,A.z)}calculateWorldAABB(t,e,i,s){const o=this.halfExtents;C[0].set(o.x,o.y,o.z),C[1].set(-o.x,o.y,o.z),C[2].set(-o.x,-o.y,o.z),C[3].set(-o.x,-o.y,-o.z),C[4].set(o.x,-o.y,-o.z),C[5].set(o.x,o.y,-o.z),C[6].set(-o.x,o.y,-o.z),C[7].set(o.x,-o.y,o.z);const n=C[0];e.vmult(n,n),t.vadd(n,n),s.copy(n),i.copy(n);for(let r=1;r<8;r++){const o=C[r];e.vmult(o,o),t.vadd(o,o);const n=o.x,a=o.y,l=o.z;n>s.x&&(s.x=n),a>s.y&&(s.y=a),l>s.z&&(s.z=l),n<i.x&&(i.x=n),a<i.y&&(i.y=a),l<i.z&&(i.z=l)}}}const A=new n,C=[new n,new n,new n,new n,new n,new n,new n,new n],M=1,F=2,N=4,q=0,R=1,T=2;class P extends p{constructor(t){void 0===t&&(t={}),super(),this.id=P.idCounter++,this.index=-1,this.world=null,this.vlambda=new n,this.collisionFilterGroup="number"===typeof t.collisionFilterGroup?t.collisionFilterGroup:1,this.collisionFilterMask="number"===typeof t.collisionFilterMask?t.collisionFilterMask:-1,this.collisionResponse="boolean"!==typeof t.collisionResponse||t.collisionResponse,this.position=new n,this.previousPosition=new n,this.interpolatedPosition=new n,this.initPosition=new n,t.position&&(this.position.copy(t.position),this.previousPosition.copy(t.position),this.interpolatedPosition.copy(t.position),this.initPosition.copy(t.position)),this.velocity=new n,t.velocity&&this.velocity.copy(t.velocity),this.initVelocity=new n,this.force=new n;const e="number"===typeof t.mass?t.mass:0;this.mass=e,this.invMass=e>0?1/e:0,this.material=t.material||null,this.linearDamping="number"===typeof t.linearDamping?t.linearDamping:.01,this.type=e<=0?P.STATIC:P.DYNAMIC,typeof t.type===typeof P.STATIC&&(this.type=t.type),this.allowSleep="undefined"===typeof t.allowSleep||t.allowSleep,this.sleepState=P.AWAKE,this.sleepSpeedLimit="undefined"!==typeof t.sleepSpeedLimit?t.sleepSpeedLimit:.1,this.sleepTimeLimit="undefined"!==typeof t.sleepTimeLimit?t.sleepTimeLimit:1,this.timeLastSleepy=0,this.wakeUpAfterNarrowphase=!1,this.torque=new n,this.quaternion=new y,this.initQuaternion=new y,this.previousQuaternion=new y,this.interpolatedQuaternion=new y,t.quaternion&&(this.quaternion.copy(t.quaternion),this.initQuaternion.copy(t.quaternion),this.previousQuaternion.copy(t.quaternion),this.interpolatedQuaternion.copy(t.quaternion)),this.angularVelocity=new n,t.angularVelocity&&this.angularVelocity.copy(t.angularVelocity),this.initAngularVelocity=new n,this.shapes=[],this.shapeOffsets=[],this.shapeOrientations=[],this.inertia=new n,this.invInertia=new n,this.invInertiaWorld=new s,this.invMassSolve=0,this.invInertiaSolve=new n,this.invInertiaWorldSolve=new s,this.fixedRotation="undefined"!==typeof t.fixedRotation&&t.fixedRotation,this.angularDamping="undefined"!==typeof t.angularDamping?t.angularDamping:.01,this.linearFactor=new n(1,1,1),t.linearFactor&&this.linearFactor.copy(t.linearFactor),this.angularFactor=new n(1,1,1),t.angularFactor&&this.angularFactor.copy(t.angularFactor),this.aabb=new h,this.aabbNeedsUpdate=!0,this.boundingRadius=0,this.wlambda=new n,this.isTrigger=Boolean(t.isTrigger),t.shape&&this.addShape(t.shape),this.updateMassProperties()}wakeUp(){const t=this.sleepState;this.sleepState=P.AWAKE,this.wakeUpAfterNarrowphase=!1,t===P.SLEEPING&&this.dispatchEvent(P.wakeupEvent)}sleep(){this.sleepState=P.SLEEPING,this.velocity.set(0,0,0),this.angularVelocity.set(0,0,0),this.wakeUpAfterNarrowphase=!1}sleepTick(t){if(this.allowSleep){const e=this.sleepState,i=this.velocity.lengthSquared()+this.angularVelocity.lengthSquared(),s=this.sleepSpeedLimit**2;e===P.AWAKE&&i<s?(this.sleepState=P.SLEEPY,this.timeLastSleepy=t,this.dispatchEvent(P.sleepyEvent)):e===P.SLEEPY&&i>s?this.wakeUp():e===P.SLEEPY&&t-this.timeLastSleepy>this.sleepTimeLimit&&(this.sleep(),this.dispatchEvent(P.sleepEvent))}}updateSolveMassProperties(){this.sleepState===P.SLEEPING||this.type===P.KINEMATIC?(this.invMassSolve=0,this.invInertiaSolve.setZero(),this.invInertiaWorldSolve.setZero()):(this.invMassSolve=this.invMass,this.invInertiaSolve.copy(this.invInertia),this.invInertiaWorldSolve.copy(this.invInertiaWorld))}pointToLocalFrame(t,e){return void 0===e&&(e=new n),t.vsub(this.position,e),this.quaternion.conjugate().vmult(e,e),e}vectorToLocalFrame(t,e){return void 0===e&&(e=new n),this.quaternion.conjugate().vmult(t,e),e}pointToWorldFrame(t,e){return void 0===e&&(e=new n),this.quaternion.vmult(t,e),e.vadd(this.position,e),e}vectorToWorldFrame(t,e){return void 0===e&&(e=new n),this.quaternion.vmult(t,e),e}addShape(t,e,i){const s=new n,o=new y;return e&&s.copy(e),i&&o.copy(i),this.shapes.push(t),this.shapeOffsets.push(s),this.shapeOrientations.push(o),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=this,this}removeShape(t){const e=this.shapes.indexOf(t);return-1===e?(console.warn("Shape does not belong to the body"),this):(this.shapes.splice(e,1),this.shapeOffsets.splice(e,1),this.shapeOrientations.splice(e,1),this.updateMassProperties(),this.updateBoundingRadius(),this.aabbNeedsUpdate=!0,t.body=null,this)}updateBoundingRadius(){const t=this.shapes,e=this.shapeOffsets,i=t.length;let s=0;for(let o=0;o!==i;o++){const i=t[o];i.updateBoundingSphereRadius();const n=e[o].length(),r=i.boundingSphereRadius;n+r>s&&(s=n+r)}this.boundingRadius=s}updateAABB(){const t=this.shapes,e=this.shapeOffsets,i=this.shapeOrientations,s=t.length,o=I,n=L,r=this.quaternion,a=this.aabb,l=j;for(let h=0;h!==s;h++){const s=t[h];r.vmult(e[h],o),o.vadd(this.position,o),r.mult(i[h],n),s.calculateWorldAABB(o,n,l.lowerBound,l.upperBound),0===h?a.copy(l):a.extend(l)}this.aabbNeedsUpdate=!1}updateInertiaWorld(t){const e=this.invInertia;if(e.x!==e.y||e.y!==e.z||t){const t=O,i=k;t.setRotationFromQuaternion(this.quaternion),t.transpose(i),t.scale(e,t),t.mmult(i,this.invInertiaWorld)}else;}applyForce(t,e){if(void 0===e&&(e=new n),this.type!==P.DYNAMIC)return;this.sleepState===P.SLEEPING&&this.wakeUp();const i=W;e.cross(t,i),this.force.vadd(t,this.force),this.torque.vadd(i,this.torque)}applyLocalForce(t,e){if(void 0===e&&(e=new n),this.type!==P.DYNAMIC)return;const i=V,s=H;this.vectorToWorldFrame(t,i),this.vectorToWorldFrame(e,s),this.applyForce(i,s)}applyTorque(t){this.type===P.DYNAMIC&&(this.sleepState===P.SLEEPING&&this.wakeUp(),this.torque.vadd(t,this.torque))}applyImpulse(t,e){if(void 0===e&&(e=new n),this.type!==P.DYNAMIC)return;this.sleepState===P.SLEEPING&&this.wakeUp();const i=e,s=D;s.copy(t),s.scale(this.invMass,s),this.velocity.vadd(s,this.velocity);const o=G;i.cross(t,o),this.invInertiaWorld.vmult(o,o),this.angularVelocity.vadd(o,this.angularVelocity)}applyLocalImpulse(t,e){if(void 0===e&&(e=new n),this.type!==P.DYNAMIC)return;const i=_,s=U;this.vectorToWorldFrame(t,i),this.vectorToWorldFrame(e,s),this.applyImpulse(i,s)}updateMassProperties(){const t=Y;this.invMass=this.mass>0?1/this.mass:0;const e=this.inertia,i=this.fixedRotation;this.updateAABB(),t.set((this.aabb.upperBound.x-this.aabb.lowerBound.x)/2,(this.aabb.upperBound.y-this.aabb.lowerBound.y)/2,(this.aabb.upperBound.z-this.aabb.lowerBound.z)/2),B.calculateInertia(t,this.mass,e),this.invInertia.set(e.x>0&&!i?1/e.x:0,e.y>0&&!i?1/e.y:0,e.z>0&&!i?1/e.z:0),this.updateInertiaWorld(!0)}getVelocityAtWorldPoint(t,e){const i=new n;return t.vsub(this.position,i),this.angularVelocity.cross(i,e),this.velocity.vadd(e,e),e}integrate(t,e,i){if(this.previousPosition.copy(this.position),this.previousQuaternion.copy(this.quaternion),this.type!==P.DYNAMIC&&this.type!==P.KINEMATIC||this.sleepState===P.SLEEPING)return;const s=this.velocity,o=this.angularVelocity,n=this.position,r=this.force,a=this.torque,l=this.quaternion,h=this.invMass,c=this.invInertiaWorld,u=this.linearFactor,d=h*t;s.x+=r.x*d*u.x,s.y+=r.y*d*u.y,s.z+=r.z*d*u.z;const p=c.elements,y=this.angularFactor,v=a.x*y.x,f=a.y*y.y,m=a.z*y.z;o.x+=t*(p[0]*v+p[1]*f+p[2]*m),o.y+=t*(p[3]*v+p[4]*f+p[5]*m),o.z+=t*(p[6]*v+p[7]*f+p[8]*m),n.x+=s.x*t,n.y+=s.y*t,n.z+=s.z*t,l.integrate(this.angularVelocity,t,this.angularFactor,l),e&&(i?l.normalizeFast():l.normalize()),this.aabbNeedsUpdate=!0,this.updateInertiaWorld()}}P.idCounter=0,P.COLLIDE_EVENT_NAME="collide",P.DYNAMIC=M,P.STATIC=F,P.KINEMATIC=N,P.AWAKE=q,P.SLEEPY=R,P.SLEEPING=T,P.wakeupEvent={type:"wakeup"},P.sleepyEvent={type:"sleepy"},P.sleepEvent={type:"sleep"};const I=new n,L=new y,j=new h,O=new s,k=new s,W=(new s,new n),V=new n,H=new n,D=new n,G=new n,_=new n,U=new n,Y=new n;class X{constructor(){this.world=null,this.useBoundingBoxes=!1,this.dirty=!0}collisionPairs(t,e,i){throw new Error("collisionPairs not implemented for this BroadPhase class!")}needBroadphaseCollision(t,e){return 0!==(t.collisionFilterGroup&e.collisionFilterMask)&&0!==(e.collisionFilterGroup&t.collisionFilterMask)&&(0===(t.type&P.STATIC)&&t.sleepState!==P.SLEEPING||0===(e.type&P.STATIC)&&e.sleepState!==P.SLEEPING)}intersectionTest(t,e,i,s){this.useBoundingBoxes?this.doBoundingBoxBroadphase(t,e,i,s):this.doBoundingSphereBroadphase(t,e,i,s)}doBoundingSphereBroadphase(t,e,i,s){const o=Z;e.position.vsub(t.position,o);const n=(t.boundingRadius+e.boundingRadius)**2;o.lengthSquared()<n&&(i.push(t),s.push(e))}doBoundingBoxBroadphase(t,e,i,s){t.aabbNeedsUpdate&&t.updateAABB(),e.aabbNeedsUpdate&&e.updateAABB(),t.aabb.overlaps(e.aabb)&&(i.push(t),s.push(e))}makePairsUnique(t,e){const i=K,s=Q,o=J,n=t.length;for(let r=0;r!==n;r++)s[r]=t[r],o[r]=e[r];t.length=0,e.length=0;for(let r=0;r!==n;r++){const t=s[r].id,e=o[r].id,n=t<e?"".concat(t,",").concat(e):"".concat(e,",").concat(t);i[n]=r,i.keys.push(n)}for(let r=0;r!==i.keys.length;r++){const n=i.keys.pop(),r=i[n];t.push(s[r]),e.push(o[r]),delete i[n]}}setWorld(t){}static boundingSphereCheck(t,e){const i=new n;t.position.vsub(e.position,i);const s=t.shapes[0],o=e.shapes[0];return Math.pow(s.boundingSphereRadius+o.boundingSphereRadius,2)>i.lengthSquared()}aabbQuery(t,e,i){return console.warn(".aabbQuery is not implemented in this Broadphase subclass."),[]}}const Z=new n;new n,new y,new n;const K={keys:[]},Q=[],J=[];new n;new n;new n;class $ extends X{constructor(){super()}collisionPairs(t,e,i){const s=t.bodies,o=s.length;let n,r;for(let a=0;a!==o;a++)for(let t=0;t!==a;t++)n=s[a],r=s[t],this.needBroadphaseCollision(n,r)&&this.intersectionTest(n,r,e,i)}aabbQuery(t,e,i){void 0===i&&(i=[]);for(let s=0;s<t.bodies.length;s++){const o=t.bodies[s];o.aabbNeedsUpdate&&o.updateAABB(),o.aabb.overlaps(e)&&i.push(o)}return i}}class tt{constructor(){this.rayFromWorld=new n,this.rayToWorld=new n,this.hitNormalWorld=new n,this.hitPointWorld=new n,this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}reset(){this.rayFromWorld.setZero(),this.rayToWorld.setZero(),this.hitNormalWorld.setZero(),this.hitPointWorld.setZero(),this.hasHit=!1,this.shape=null,this.body=null,this.hitFaceIndex=-1,this.distance=-1,this.shouldStop=!1}abort(){this.shouldStop=!0}set(t,e,i,s,o,n,r){this.rayFromWorld.copy(t),this.rayToWorld.copy(e),this.hitNormalWorld.copy(i),this.hitPointWorld.copy(s),this.shape=o,this.body=n,this.distance=r}}let et,it,st,ot,nt,rt,at;const lt=1,ht=2,ct=4;et=m.types.SPHERE,it=m.types.PLANE,st=m.types.BOX,ot=m.types.CYLINDER,nt=m.types.CONVEXPOLYHEDRON,rt=m.types.HEIGHTFIELD,at=m.types.TRIMESH;class ut{get[et](){return this._intersectSphere}get[it](){return this._intersectPlane}get[st](){return this._intersectBox}get[ot](){return this._intersectConvex}get[nt](){return this._intersectConvex}get[rt](){return this._intersectHeightfield}get[at](){return this._intersectTrimesh}constructor(t,e){void 0===t&&(t=new n),void 0===e&&(e=new n),this.from=t.clone(),this.to=e.clone(),this.direction=new n,this.precision=1e-4,this.checkCollisionResponse=!0,this.skipBackfaces=!1,this.collisionFilterMask=-1,this.collisionFilterGroup=-1,this.mode=ut.ANY,this.result=new tt,this.hasHit=!1,this.callback=t=>{}}intersectWorld(t,e){return this.mode=e.mode||ut.ANY,this.result=e.result||new tt,this.skipBackfaces=!!e.skipBackfaces,this.collisionFilterMask="undefined"!==typeof e.collisionFilterMask?e.collisionFilterMask:-1,this.collisionFilterGroup="undefined"!==typeof e.collisionFilterGroup?e.collisionFilterGroup:-1,this.checkCollisionResponse="undefined"===typeof e.checkCollisionResponse||e.checkCollisionResponse,e.from&&this.from.copy(e.from),e.to&&this.to.copy(e.to),this.callback=e.callback||(()=>{}),this.hasHit=!1,this.result.reset(),this.updateDirection(),this.getAABB(dt),pt.length=0,t.broadphase.aabbQuery(t,dt,pt),this.intersectBodies(pt),this.hasHit}intersectBody(t,e){e&&(this.result=e,this.updateDirection());const i=this.checkCollisionResponse;if(i&&!t.collisionResponse)return;if(0===(this.collisionFilterGroup&t.collisionFilterMask)||0===(t.collisionFilterGroup&this.collisionFilterMask))return;const s=ft,o=mt;for(let n=0,r=t.shapes.length;n<r;n++){const e=t.shapes[n];if((!i||e.collisionResponse)&&(t.quaternion.mult(t.shapeOrientations[n],o),t.quaternion.vmult(t.shapeOffsets[n],s),s.vadd(t.position,s),this.intersectShape(e,o,s,t),this.result.shouldStop))break}}intersectBodies(t,e){e&&(this.result=e,this.updateDirection());for(let i=0,s=t.length;!this.result.shouldStop&&i<s;i++)this.intersectBody(t[i])}updateDirection(){this.to.vsub(this.from,this.direction),this.direction.normalize()}intersectShape(t,e,i,s){const o=function(t,e,i){i.vsub(t,Ot);const s=Ot.dot(e);e.scale(s,kt),kt.vadd(t,kt);const o=i.distanceTo(kt);return o}(this.from,this.direction,i);if(o>t.boundingSphereRadius)return;const n=this[t.type];n&&n.call(this,t,e,i,s,t)}_intersectBox(t,e,i,s,o){return this._intersectConvex(t.convexPolyhedronRepresentation,e,i,s,o)}_intersectPlane(t,e,i,s,o){const r=this.from,a=this.to,l=this.direction,h=new n(0,0,1);e.vmult(h,h);const c=new n;r.vsub(i,c);const u=c.dot(h);a.vsub(i,c);if(u*c.dot(h)>0)return;if(r.distanceTo(a)<u)return;const d=h.dot(l);if(Math.abs(d)<this.precision)return;const p=new n,y=new n,v=new n;r.vsub(i,p);const f=-h.dot(p)/d;l.scale(f,y),r.vadd(y,v),this.reportIntersection(h,v,o,s,-1)}getAABB(t){const{lowerBound:e,upperBound:i}=t,s=this.to,o=this.from;e.x=Math.min(s.x,o.x),e.y=Math.min(s.y,o.y),e.z=Math.min(s.z,o.z),i.x=Math.max(s.x,o.x),i.y=Math.max(s.y,o.y),i.z=Math.max(s.z,o.z)}_intersectHeightfield(t,e,i,s,o){t.data,t.elementSize;const n=St;n.from.copy(this.from),n.to.copy(this.to),w.pointToLocalFrame(i,e,n.from,n.from),w.pointToLocalFrame(i,e,n.to,n.to),n.updateDirection();const r=Bt;let a,l,c,u;a=l=0,c=u=t.data.length-1;const d=new h;n.getAABB(d),t.getIndexOfPosition(d.lowerBound.x,d.lowerBound.y,r,!0),a=Math.max(a,r[0]),l=Math.max(l,r[1]),t.getIndexOfPosition(d.upperBound.x,d.upperBound.y,r,!0),c=Math.min(c,r[0]+1),u=Math.min(u,r[1]+1);for(let h=a;h<c;h++)for(let r=l;r<u;r++){if(this.result.shouldStop)return;if(t.getAabbAtIndex(h,r,d),d.overlapsRay(n)){if(t.getConvexTrianglePillar(h,r,!1),w.pointToWorldFrame(i,e,t.pillarOffset,zt),this._intersectConvex(t.pillarConvex,e,zt,s,o,Et),this.result.shouldStop)return;t.getConvexTrianglePillar(h,r,!0),w.pointToWorldFrame(i,e,t.pillarOffset,zt),this._intersectConvex(t.pillarConvex,e,zt,s,o,Et)}}}_intersectSphere(t,e,i,s,o){const n=this.from,r=this.to,a=t.radius,l=(r.x-n.x)**2+(r.y-n.y)**2+(r.z-n.z)**2,h=2*((r.x-n.x)*(n.x-i.x)+(r.y-n.y)*(n.y-i.y)+(r.z-n.z)*(n.z-i.z)),c=h**2-4*l*((n.x-i.x)**2+(n.y-i.y)**2+(n.z-i.z)**2-a**2),u=At,d=Ct;if(!(c<0))if(0===c)n.lerp(r,c,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,o,s,-1);else{const t=(-h-Math.sqrt(c))/(2*l),e=(-h+Math.sqrt(c))/(2*l);if(t>=0&&t<=1&&(n.lerp(r,t,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,o,s,-1)),this.result.shouldStop)return;e>=0&&e<=1&&(n.lerp(r,e,u),u.vsub(i,d),d.normalize(),this.reportIntersection(d,u,o,s,-1))}}_intersectConvex(t,e,i,s,o,n){const r=Mt,a=Ft,l=n&&n.faceList||null,h=t.faces,c=t.vertices,u=t.faceNormals,d=this.direction,p=this.from,y=this.to,v=p.distanceTo(y),f=l?l.length:h.length,m=this.result;for(let w=0;!m.shouldStop&&w<f;w++){const t=l?l[w]:w,n=h[t],y=u[t],f=e,g=i;a.copy(c[n[0]]),f.vmult(a,a),a.vadd(g,a),a.vsub(p,a),f.vmult(y,r);const x=d.dot(r);if(Math.abs(x)<this.precision)continue;const b=r.dot(a)/x;if(!(b<0)){d.scale(b,wt),wt.vadd(p,wt),gt.copy(c[n[0]]),f.vmult(gt,gt),g.vadd(gt,gt);for(let e=1;!m.shouldStop&&e<n.length-1;e++){xt.copy(c[n[e]]),bt.copy(c[n[e+1]]),f.vmult(xt,xt),f.vmult(bt,bt),g.vadd(xt,xt),g.vadd(bt,bt);const i=wt.distanceTo(p);!ut.pointInTriangle(wt,gt,xt,bt)&&!ut.pointInTriangle(wt,xt,gt,bt)||i>v||this.reportIntersection(r,wt,o,s,t)}}}}_intersectTrimesh(t,e,i,s,o,n){const r=Nt,a=Lt,l=jt,h=Ft,c=qt,u=Rt,d=Tt,p=It,y=Pt,v=t.indices;t.vertices;const f=this.from,m=this.to,g=this.direction;l.position.copy(i),l.quaternion.copy(e),w.vectorToLocalFrame(i,e,g,c),w.pointToLocalFrame(i,e,f,u),w.pointToLocalFrame(i,e,m,d),d.x*=t.scale.x,d.y*=t.scale.y,d.z*=t.scale.z,u.x*=t.scale.x,u.y*=t.scale.y,u.z*=t.scale.z,d.vsub(u,c),c.normalize();const x=u.distanceSquared(d);t.tree.rayQuery(this,l,a);for(let b=0,E=a.length;!this.result.shouldStop&&b!==E;b++){const n=a[b];t.getNormal(n,r),t.getVertex(v[3*n],gt),gt.vsub(u,h);const l=c.dot(r),d=r.dot(h)/l;if(d<0)continue;c.scale(d,wt),wt.vadd(u,wt),t.getVertex(v[3*n+1],xt),t.getVertex(v[3*n+2],bt);const f=wt.distanceSquared(u);!ut.pointInTriangle(wt,xt,gt,bt)&&!ut.pointInTriangle(wt,gt,xt,bt)||f>x||(w.vectorToWorldFrame(e,r,y),w.pointToWorldFrame(i,e,wt,p),this.reportIntersection(y,p,o,s,n))}a.length=0}reportIntersection(t,e,i,s,o){const n=this.from,r=this.to,a=n.distanceTo(e),l=this.result;if(!(this.skipBackfaces&&t.dot(this.direction)>0))switch(l.hitFaceIndex="undefined"!==typeof o?o:-1,this.mode){case ut.ALL:this.hasHit=!0,l.set(n,r,t,e,i,s,a),l.hasHit=!0,this.callback(l);break;case ut.CLOSEST:(a<l.distance||!l.hasHit)&&(this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,i,s,a));break;case ut.ANY:this.hasHit=!0,l.hasHit=!0,l.set(n,r,t,e,i,s,a),l.shouldStop=!0}}static pointInTriangle(t,e,i,s){s.vsub(e,Ot),i.vsub(e,yt),t.vsub(e,vt);const o=Ot.dot(Ot),n=Ot.dot(yt),r=Ot.dot(vt),a=yt.dot(yt),l=yt.dot(vt);let h,c;return(h=a*r-n*l)>=0&&(c=o*l-n*r)>=0&&h+c<o*a-n*n}}ut.CLOSEST=lt,ut.ANY=ht,ut.ALL=ct;const dt=new h,pt=[],yt=new n,vt=new n,ft=new n,mt=new y,wt=new n,gt=new n,xt=new n,bt=new n;new n,new tt;const Et={faceList:[0]},zt=new n,St=new ut,Bt=[],At=new n,Ct=new n,Mt=new n,Ft=(new n,new n,new n),Nt=new n,qt=new n,Rt=new n,Tt=new n,Pt=new n,It=new n;new h;const Lt=[],jt=new w,Ot=new n,kt=new n;class Wt extends X{static checkBounds(t,e,i){let s,o;0===i?(s=t.position.x,o=e.position.x):1===i?(s=t.position.y,o=e.position.y):2===i&&(s=t.position.z,o=e.position.z);const n=t.boundingRadius;return o-e.boundingRadius<s+n}static insertionSortX(t){for(let e=1,i=t.length;e<i;e++){const i=t[e];let s;for(s=e-1;s>=0&&!(t[s].aabb.lowerBound.x<=i.aabb.lowerBound.x);s--)t[s+1]=t[s];t[s+1]=i}return t}static insertionSortY(t){for(let e=1,i=t.length;e<i;e++){const i=t[e];let s;for(s=e-1;s>=0&&!(t[s].aabb.lowerBound.y<=i.aabb.lowerBound.y);s--)t[s+1]=t[s];t[s+1]=i}return t}static insertionSortZ(t){for(let e=1,i=t.length;e<i;e++){const i=t[e];let s;for(s=e-1;s>=0&&!(t[s].aabb.lowerBound.z<=i.aabb.lowerBound.z);s--)t[s+1]=t[s];t[s+1]=i}return t}constructor(t){super(),this.axisList=[],this.world=null,this.axisIndex=0;const e=this.axisList;this._addBodyHandler=t=>{e.push(t.body)},this._removeBodyHandler=t=>{const i=e.indexOf(t.body);-1!==i&&e.splice(i,1)},t&&this.setWorld(t)}setWorld(t){this.axisList.length=0;for(let e=0;e<t.bodies.length;e++)this.axisList.push(t.bodies[e]);t.removeEventListener("addBody",this._addBodyHandler),t.removeEventListener("removeBody",this._removeBodyHandler),t.addEventListener("addBody",this._addBodyHandler),t.addEventListener("removeBody",this._removeBodyHandler),this.world=t,this.dirty=!0}collisionPairs(t,e,i){const s=this.axisList,o=s.length,n=this.axisIndex;let r,a;for(this.dirty&&(this.sortList(),this.dirty=!1),r=0;r!==o;r++){const t=s[r];for(a=r+1;a<o;a++){const o=s[a];if(this.needBroadphaseCollision(t,o)){if(!Wt.checkBounds(t,o,n))break;this.intersectionTest(t,o,e,i)}}}}sortList(){const t=this.axisList,e=this.axisIndex,i=t.length;for(let s=0;s!==i;s++){const e=t[s];e.aabbNeedsUpdate&&e.updateAABB()}0===e?Wt.insertionSortX(t):1===e?Wt.insertionSortY(t):2===e&&Wt.insertionSortZ(t)}autoDetectAxis(){let t=0,e=0,i=0,s=0,o=0,n=0;const r=this.axisList,a=r.length,l=1/a;for(let d=0;d!==a;d++){const a=r[d],l=a.position.x;t+=l,e+=l*l;const h=a.position.y;i+=h,s+=h*h;const c=a.position.z;o+=c,n+=c*c}const h=e-t*t*l,c=s-i*i*l,u=n-o*o*l;this.axisIndex=h>c?h>u?0:2:c>u?1:2}aabbQuery(t,e,i){void 0===i&&(i=[]),this.dirty&&(this.sortList(),this.dirty=!1);const s=this.axisIndex;let o="x";1===s&&(o="y"),2===s&&(o="z");const n=this.axisList;e.lowerBound[o],e.upperBound[o];for(let r=0;r<n.length;r++){const t=n[r];t.aabbNeedsUpdate&&t.updateAABB(),t.aabb.overlaps(e)&&i.push(t)}return i}}class Vt{static defaults(t,e){void 0===t&&(t={});for(let i in e)i in t||(t[i]=e[i]);return t}}class Ht{constructor(t,e,i){void 0===i&&(i={}),i=Vt.defaults(i,{collideConnected:!0,wakeUpBodies:!0}),this.equations=[],this.bodyA=t,this.bodyB=e,this.id=Ht.idCounter++,this.collideConnected=i.collideConnected,i.wakeUpBodies&&(t&&t.wakeUp(),e&&e.wakeUp())}update(){throw new Error("method update() not implmemented in this Constraint subclass!")}enable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!0}disable(){const t=this.equations;for(let e=0;e<t.length;e++)t[e].enabled=!1}}Ht.idCounter=0;class Dt{constructor(){this.spatial=new n,this.rotational=new n}multiplyElement(t){return t.spatial.dot(this.spatial)+t.rotational.dot(this.rotational)}multiplyVectors(t,e){return t.dot(this.spatial)+e.dot(this.rotational)}}class Gt{constructor(t,e,i,s){void 0===i&&(i=-1e6),void 0===s&&(s=1e6),this.id=Gt.idCounter++,this.minForce=i,this.maxForce=s,this.bi=t,this.bj=e,this.a=0,this.b=0,this.eps=0,this.jacobianElementA=new Dt,this.jacobianElementB=new Dt,this.enabled=!0,this.multiplier=0,this.setSpookParams(1e7,4,1/60)}setSpookParams(t,e,i){const s=e,o=t,n=i;this.a=4/(n*(1+4*s)),this.b=4*s/(1+4*s),this.eps=4/(n*n*o*(1+4*s))}computeB(t,e,i){const s=this.computeGW();return-this.computeGq()*t-s*e-this.computeGiMf()*i}computeGq(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,o=i.position,n=s.position;return t.spatial.dot(o)+e.spatial.dot(n)}computeGW(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,o=i.velocity,n=s.velocity,r=i.angularVelocity,a=s.angularVelocity;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGWlambda(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,o=i.vlambda,n=s.vlambda,r=i.wlambda,a=s.wlambda;return t.multiplyVectors(o,r)+e.multiplyVectors(n,a)}computeGiMf(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,o=i.force,n=i.torque,r=s.force,a=s.torque,l=i.invMassSolve,h=s.invMassSolve;return o.scale(l,_t),r.scale(h,Ut),i.invInertiaWorldSolve.vmult(n,Yt),s.invInertiaWorldSolve.vmult(a,Xt),t.multiplyVectors(_t,Yt)+e.multiplyVectors(Ut,Xt)}computeGiMGt(){const t=this.jacobianElementA,e=this.jacobianElementB,i=this.bi,s=this.bj,o=i.invMassSolve,n=s.invMassSolve,r=i.invInertiaWorldSolve,a=s.invInertiaWorldSolve;let l=o+n;return r.vmult(t.rotational,Zt),l+=Zt.dot(t.rotational),a.vmult(e.rotational,Zt),l+=Zt.dot(e.rotational),l}addToWlambda(t){const e=this.jacobianElementA,i=this.jacobianElementB,s=this.bi,o=this.bj,n=Kt;s.vlambda.addScaledVector(s.invMassSolve*t,e.spatial,s.vlambda),o.vlambda.addScaledVector(o.invMassSolve*t,i.spatial,o.vlambda),s.invInertiaWorldSolve.vmult(e.rotational,n),s.wlambda.addScaledVector(t,n,s.wlambda),o.invInertiaWorldSolve.vmult(i.rotational,n),o.wlambda.addScaledVector(t,n,o.wlambda)}computeC(){return this.computeGiMGt()+this.eps}}Gt.idCounter=0;const _t=new n,Ut=new n,Yt=new n,Xt=new n,Zt=new n,Kt=new n;class Qt extends Gt{constructor(t,e,i){void 0===i&&(i=1e6),super(t,e,0,i),this.restitution=0,this.ri=new n,this.rj=new n,this.ni=new n}computeB(t){const e=this.a,i=this.b,s=this.bi,o=this.bj,n=this.ri,r=this.rj,a=Jt,l=$t,h=s.velocity,c=s.angularVelocity;s.force,s.torque;const u=o.velocity,d=o.angularVelocity;o.force,o.torque;const p=te,y=this.jacobianElementA,v=this.jacobianElementB,f=this.ni;n.cross(f,a),r.cross(f,l),f.negate(y.spatial),a.negate(y.rotational),v.spatial.copy(f),v.rotational.copy(l),p.copy(o.position),p.vadd(r,p),p.vsub(s.position,p),p.vsub(n,p);const m=f.dot(p),w=this.restitution+1;return-m*e-(w*u.dot(f)-w*h.dot(f)+d.dot(l)-c.dot(a))*i-t*this.computeGiMf()}getImpactVelocityAlongNormal(){const t=ee,e=ie,i=se,s=oe,o=ne;return this.bi.position.vadd(this.ri,i),this.bj.position.vadd(this.rj,s),this.bi.getVelocityAtWorldPoint(i,t),this.bj.getVelocityAtWorldPoint(s,e),t.vsub(e,o),this.ni.dot(o)}}const Jt=new n,$t=new n,te=new n,ee=new n,ie=new n,se=new n,oe=new n,ne=new n;new n,new n;new n,new n;new n,new n;new n,new n;new n,new n;class re extends Gt{constructor(t,e,i){super(t,e,-i,i),this.ri=new n,this.rj=new n,this.t=new n}computeB(t){this.a;const e=this.b;this.bi,this.bj;const i=this.ri,s=this.rj,o=ae,n=le,r=this.t;i.cross(r,o),s.cross(r,n);const a=this.jacobianElementA,l=this.jacobianElementB;r.negate(a.spatial),o.negate(a.rotational),l.spatial.copy(r),l.rotational.copy(n);return-this.computeGW()*e-t*this.computeGiMf()}}const ae=new n,le=new n;class he{constructor(t,e,i){i=Vt.defaults(i,{friction:.3,restitution:.3,contactEquationStiffness:1e7,contactEquationRelaxation:3,frictionEquationStiffness:1e7,frictionEquationRelaxation:3}),this.id=he.idCounter++,this.materials=[t,e],this.friction=i.friction,this.restitution=i.restitution,this.contactEquationStiffness=i.contactEquationStiffness,this.contactEquationRelaxation=i.contactEquationRelaxation,this.frictionEquationStiffness=i.frictionEquationStiffness,this.frictionEquationRelaxation=i.frictionEquationRelaxation}}he.idCounter=0;class ce{constructor(t){void 0===t&&(t={});let e="";"string"===typeof t&&(e=t,t={}),this.name=e,this.id=ce.idCounter++,this.friction="undefined"!==typeof t.friction?t.friction:-1,this.restitution="undefined"!==typeof t.restitution?t.restitution:-1}}ce.idCounter=0;new n,new n,new n,new n,new n,new n,new n,new n,new n,new n,new n;new n,new n;new n,new n,new n;new n,new n,new n;new ut,new n;new n,new n,new n(1,0,0),new n(0,1,0),new n(0,0,1),new n,new n,new n,new n;new n,new n,new n,new n;new n,new n,new n;class ue extends m{constructor(t){if(super({type:m.types.SPHERE}),this.radius=void 0!==t?t:1,this.radius<0)throw new Error("The sphere radius cannot be negative.");this.updateBoundingSphereRadius()}calculateLocalInertia(t,e){void 0===e&&(e=new n);const i=2*t*this.radius*this.radius/5;return e.x=i,e.y=i,e.z=i,e}volume(){return 4*Math.PI*Math.pow(this.radius,3)/3}updateBoundingSphereRadius(){this.boundingSphereRadius=this.radius}calculateWorldAABB(t,e,i,s){const o=this.radius,n=["x","y","z"];for(let r=0;r<n.length;r++){const e=n[r];i[e]=t[e]-o,s[e]=t[e]+o}}}new n,new n;new n,new n,new n,new n,new n,new n,new n;class de extends m{constructor(){super({type:m.types.PLANE}),this.worldNormal=new n,this.worldNormalNeedsUpdate=!0,this.boundingSphereRadius=Number.MAX_VALUE}computeWorldNormal(t){const e=this.worldNormal;e.set(0,0,1),t.vmult(e,e),this.worldNormalNeedsUpdate=!1}calculateLocalInertia(t,e){return void 0===e&&(e=new n),e}volume(){return Number.MAX_VALUE}calculateWorldAABB(t,e,i,s){pe.set(0,0,1),e.vmult(pe,pe);const o=Number.MAX_VALUE;i.set(-o,-o,-o),s.set(o,o,o),1===pe.x?s.x=t.x:-1===pe.x&&(i.x=t.x),1===pe.y?s.y=t.y:-1===pe.y&&(i.y=t.y),1===pe.z?s.z=t.z:-1===pe.z&&(i.z=t.z)}updateBoundingSphereRadius(){this.boundingSphereRadius=Number.MAX_VALUE}}const pe=new n;new n,new n,new n,new n,new n,new n,new n,new n,new n;new n,new h;new n,new h,new n,new n,new n,new n,new n,new n,new n,new h,new n,new w,new h;class ye{constructor(){this.equations=[]}solve(t,e){return 0}addEquation(t){!t.enabled||t.bi.isTrigger||t.bj.isTrigger||this.equations.push(t)}removeEquation(t){const e=this.equations,i=e.indexOf(t);-1!==i&&e.splice(i,1)}removeAllEquations(){this.equations.length=0}}class ve extends ye{constructor(){super(),this.iterations=10,this.tolerance=1e-7}solve(t,e){let i=0;const s=this.iterations,o=this.tolerance*this.tolerance,n=this.equations,r=n.length,a=e.bodies,l=a.length,h=t;let c,u,d,p,y,v;if(0!==r)for(let g=0;g!==l;g++)a[g].updateSolveMassProperties();const f=me,m=we,w=fe;f.length=r,m.length=r,w.length=r;for(let g=0;g!==r;g++){const t=n[g];w[g]=0,m[g]=t.computeB(h),f[g]=1/t.computeC()}if(0!==r){for(let i=0;i!==l;i++){const t=a[i],e=t.vlambda,s=t.wlambda;e.set(0,0,0),s.set(0,0,0)}for(i=0;i!==s;i++){p=0;for(let t=0;t!==r;t++){const e=n[t];c=m[t],u=f[t],v=w[t],y=e.computeGWlambda(),d=u*(c-y-e.eps*v),v+d<e.minForce?d=e.minForce-v:v+d>e.maxForce&&(d=e.maxForce-v),w[t]+=d,p+=d>0?d:-d,e.addToWlambda(d)}if(p*p<o)break}for(let i=0;i!==l;i++){const t=a[i],e=t.velocity,s=t.angularVelocity;t.vlambda.vmul(t.linearFactor,t.vlambda),e.vadd(t.vlambda,e),t.wlambda.vmul(t.angularFactor,t.wlambda),s.vadd(t.wlambda,s)}let t=n.length;const e=1/h;for(;t--;)n[t].multiplier=w[t]*e}return i}}const fe=[],me=[],we=[];P.STATIC;class ge{constructor(){this.objects=[],this.type=Object}release(){const t=arguments.length;for(let e=0;e!==t;e++)this.objects.push(e<0||arguments.length<=e?void 0:arguments[e]);return this}get(){return 0===this.objects.length?this.constructObject():this.objects.pop()}constructObject(){throw new Error("constructObject() not implemented in this Pool subclass yet!")}resize(t){const e=this.objects;for(;e.length>t;)e.pop();for(;e.length<t;)e.push(this.constructObject());return this}}class xe extends ge{constructor(){super(...arguments),this.type=n}constructObject(){return new n}}const be=m.types.SPHERE,Ee=m.types.SPHERE|m.types.PLANE,ze=m.types.BOX|m.types.BOX,Se=m.types.SPHERE|m.types.BOX,Be=m.types.PLANE|m.types.BOX,Ae=m.types.CONVEXPOLYHEDRON,Ce=m.types.SPHERE|m.types.CONVEXPOLYHEDRON,Me=m.types.PLANE|m.types.CONVEXPOLYHEDRON,Fe=m.types.BOX|m.types.CONVEXPOLYHEDRON,Ne=m.types.SPHERE|m.types.HEIGHTFIELD,qe=m.types.BOX|m.types.HEIGHTFIELD,Re=m.types.CONVEXPOLYHEDRON|m.types.HEIGHTFIELD,Te=m.types.PARTICLE|m.types.SPHERE,Pe=m.types.PLANE|m.types.PARTICLE,Ie=m.types.BOX|m.types.PARTICLE,Le=m.types.PARTICLE|m.types.CONVEXPOLYHEDRON,je=m.types.CYLINDER,Oe=m.types.SPHERE|m.types.CYLINDER,ke=m.types.PLANE|m.types.CYLINDER,We=m.types.BOX|m.types.CYLINDER,Ve=m.types.CONVEXPOLYHEDRON|m.types.CYLINDER,He=m.types.HEIGHTFIELD|m.types.CYLINDER,De=m.types.PARTICLE|m.types.CYLINDER,Ge=m.types.SPHERE|m.types.TRIMESH,_e=m.types.PLANE|m.types.TRIMESH;class Ue{get[be](){return this.sphereSphere}get[Ee](){return this.spherePlane}get[ze](){return this.boxBox}get[Se](){return this.sphereBox}get[Be](){return this.planeBox}get[Ae](){return this.convexConvex}get[Ce](){return this.sphereConvex}get[Me](){return this.planeConvex}get[Fe](){return this.boxConvex}get[Ne](){return this.sphereHeightfield}get[qe](){return this.boxHeightfield}get[Re](){return this.convexHeightfield}get[Te](){return this.sphereParticle}get[Pe](){return this.planeParticle}get[Ie](){return this.boxParticle}get[Le](){return this.convexParticle}get[je](){return this.convexConvex}get[Oe](){return this.sphereConvex}get[ke](){return this.planeConvex}get[We](){return this.boxConvex}get[Ve](){return this.convexConvex}get[He](){return this.heightfieldCylinder}get[De](){return this.particleCylinder}get[Ge](){return this.sphereTrimesh}get[_e](){return this.planeTrimesh}constructor(t){this.contactPointPool=[],this.frictionEquationPool=[],this.result=[],this.frictionResult=[],this.v3pool=new xe,this.world=t,this.currentContactMaterial=t.defaultContactMaterial,this.enableFrictionReduction=!1}createContactEquation(t,e,i,s,o,n){let r;this.contactPointPool.length?(r=this.contactPointPool.pop(),r.bi=t,r.bj=e):r=new Qt(t,e),r.enabled=t.collisionResponse&&e.collisionResponse&&i.collisionResponse&&s.collisionResponse;const a=this.currentContactMaterial;r.restitution=a.restitution,r.setSpookParams(a.contactEquationStiffness,a.contactEquationRelaxation,this.world.dt);const l=i.material||t.material,h=s.material||e.material;return l&&h&&l.restitution>=0&&h.restitution>=0&&(r.restitution=l.restitution*h.restitution),r.si=o||i,r.sj=n||s,r}createFrictionEquationsFromContact(t,e){const i=t.bi,s=t.bj,o=t.si,n=t.sj,r=this.world,a=this.currentContactMaterial;let l=a.friction;const h=o.material||i.material,c=n.material||s.material;if(h&&c&&h.friction>=0&&c.friction>=0&&(l=h.friction*c.friction),l>0){const o=l*(r.frictionGravity||r.gravity).length();let n=i.invMass+s.invMass;n>0&&(n=1/n);const h=this.frictionEquationPool,c=h.length?h.pop():new re(i,s,o*n),u=h.length?h.pop():new re(i,s,o*n);return c.bi=u.bi=i,c.bj=u.bj=s,c.minForce=u.minForce=-o*n,c.maxForce=u.maxForce=o*n,c.ri.copy(t.ri),c.rj.copy(t.rj),u.ri.copy(t.ri),u.rj.copy(t.rj),t.ni.tangents(c.t,u.t),c.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),u.setSpookParams(a.frictionEquationStiffness,a.frictionEquationRelaxation,r.dt),c.enabled=u.enabled=t.enabled,e.push(c,u),!0}return!1}createFrictionFromAverage(t){let e=this.result[this.result.length-1];if(!this.createFrictionEquationsFromContact(e,this.frictionResult)||1===t)return;const i=this.frictionResult[this.frictionResult.length-2],s=this.frictionResult[this.frictionResult.length-1];Ye.setZero(),Xe.setZero(),Ze.setZero();const o=e.bi;e.bj;for(let r=0;r!==t;r++)e=this.result[this.result.length-1-r],e.bi!==o?(Ye.vadd(e.ni,Ye),Xe.vadd(e.ri,Xe),Ze.vadd(e.rj,Ze)):(Ye.vsub(e.ni,Ye),Xe.vadd(e.rj,Xe),Ze.vadd(e.ri,Ze));const n=1/t;Xe.scale(n,i.ri),Ze.scale(n,i.rj),s.ri.copy(i.ri),s.rj.copy(i.rj),Ye.normalize(),Ye.tangents(i.t,s.t)}getContacts(t,e,i,s,o,n,r){this.contactPointPool=o,this.frictionEquationPool=r,this.result=s,this.frictionResult=n;const a=Je,l=$e,h=Ke,c=Qe;for(let u=0,d=t.length;u!==d;u++){const s=t[u],o=e[u];let n=null;s.material&&o.material&&(n=i.getContactMaterial(s.material,o.material)||null);const r=s.type&P.KINEMATIC&&o.type&P.STATIC||s.type&P.STATIC&&o.type&P.KINEMATIC||s.type&P.KINEMATIC&&o.type&P.KINEMATIC;for(let t=0;t<s.shapes.length;t++){s.quaternion.mult(s.shapeOrientations[t],a),s.quaternion.vmult(s.shapeOffsets[t],h),h.vadd(s.position,h);const e=s.shapes[t];for(let t=0;t<o.shapes.length;t++){o.quaternion.mult(o.shapeOrientations[t],l),o.quaternion.vmult(o.shapeOffsets[t],c),c.vadd(o.position,c);const u=o.shapes[t];if(!(e.collisionFilterMask&u.collisionFilterGroup&&u.collisionFilterMask&e.collisionFilterGroup))continue;if(h.distanceTo(c)>e.boundingSphereRadius+u.boundingSphereRadius)continue;let d=null;e.material&&u.material&&(d=i.getContactMaterial(e.material,u.material)||null),this.currentContactMaterial=d||n||i.defaultContactMaterial;const p=this[e.type|u.type];if(p){let t=!1;t=e.type<u.type?p.call(this,e,u,h,c,a,l,s,o,e,u,r):p.call(this,u,e,c,h,l,a,o,s,e,u,r),t&&r&&(i.shapeOverlapKeeper.set(e.id,u.id),i.bodyOverlapKeeper.set(s.id,o.id))}}}}}sphereSphere(t,e,i,s,o,n,r,a,l,h,c){if(c)return i.distanceSquared(s)<(t.radius+e.radius)**2;const u=this.createContactEquation(r,a,t,e,l,h);s.vsub(i,u.ni),u.ni.normalize(),u.ri.copy(u.ni),u.rj.copy(u.ni),u.ri.scale(t.radius,u.ri),u.rj.scale(-e.radius,u.rj),u.ri.vadd(i,u.ri),u.ri.vsub(r.position,u.ri),u.rj.vadd(s,u.rj),u.rj.vsub(a.position,u.rj),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}spherePlane(t,e,i,s,o,n,r,a,l,h,c){const u=this.createContactEquation(r,a,t,e,l,h);if(u.ni.set(0,0,1),n.vmult(u.ni,u.ni),u.ni.negate(u.ni),u.ni.normalize(),u.ni.scale(t.radius,u.ri),i.vsub(s,wi),u.ni.scale(u.ni.dot(wi),gi),wi.vsub(gi,u.rj),-wi.dot(u.ni)<=t.radius){if(c)return!0;const t=u.ri,e=u.rj;t.vadd(i,t),t.vsub(r.position,t),e.vadd(s,e),e.vsub(a.position,e),this.result.push(u),this.createFrictionEquationsFromContact(u,this.frictionResult)}}boxBox(t,e,i,s,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,e.convexPolyhedronRepresentation.material=e.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e.convexPolyhedronRepresentation,i,s,o,n,r,a,t,e,c)}sphereBox(t,e,i,s,o,n,r,a,l,h,c){const u=this.v3pool,d=Mi;i.vsub(s,Si),e.getSideNormals(d,n);const p=t.radius;let y=!1;const v=Ni,f=qi,m=Ri;let w=null,g=0,x=0,b=0,E=null;for(let q=0,R=d.length;q!==R&&!1===y;q++){const t=Bi;t.copy(d[q]);const e=t.length();t.normalize();const i=Si.dot(t);if(i<e+p&&i>0){const s=Ai,o=Ci;s.copy(d[(q+1)%3]),o.copy(d[(q+2)%3]);const n=s.length(),r=o.length();s.normalize(),o.normalize();const a=Si.dot(s),l=Si.dot(o);if(a<n&&a>-n&&l<r&&l>-r){const n=Math.abs(i-e-p);if((null===E||n<E)&&(E=n,x=a,b=l,w=e,v.copy(t),f.copy(s),m.copy(o),g++,c))return!0}}}if(g){y=!0;const o=this.createContactEquation(r,a,t,e,l,h);v.scale(-p,o.ri),o.ni.copy(v),o.ni.negate(o.ni),v.scale(w,v),f.scale(x,f),v.vadd(f,v),m.scale(b,m),v.vadd(m,o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}let z=u.get();const S=Fi;for(let q=0;2!==q&&!y;q++)for(let o=0;2!==o&&!y;o++)for(let n=0;2!==n&&!y;n++)if(z.set(0,0,0),q?z.vadd(d[0],z):z.vsub(d[0],z),o?z.vadd(d[1],z):z.vsub(d[1],z),n?z.vadd(d[2],z):z.vsub(d[2],z),s.vadd(z,S),S.vsub(i,S),S.lengthSquared()<p*p){if(c)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,h);o.ri.copy(S),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(p,o.ri),o.rj.copy(z),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}u.release(z),z=null;const B=u.get(),A=u.get(),C=u.get(),M=u.get(),F=u.get(),N=d.length;for(let q=0;q!==N&&!y;q++)for(let o=0;o!==N&&!y;o++)if(q%3!==o%3){d[o].cross(d[q],B),B.normalize(),d[q].vadd(d[o],A),C.copy(i),C.vsub(A,C),C.vsub(s,C);const n=C.dot(B);B.scale(n,M);let u=0;for(;u===q%3||u===o%3;)u++;F.copy(i),F.vsub(M,F),F.vsub(A,F),F.vsub(s,F);const v=Math.abs(n),f=F.length();if(v<d[u].length()&&f<p){if(c)return!0;y=!0;const o=this.createContactEquation(r,a,t,e,l,h);A.vadd(M,o.rj),o.rj.copy(o.rj),F.negate(o.ni),o.ni.normalize(),o.ri.copy(o.rj),o.ri.vadd(s,o.ri),o.ri.vsub(i,o.ri),o.ri.normalize(),o.ri.scale(p,o.ri),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}u.release(B,A,C,M,F)}planeBox(t,e,i,s,o,n,r,a,l,h,c){return e.convexPolyhedronRepresentation.material=e.material,e.convexPolyhedronRepresentation.collisionResponse=e.collisionResponse,e.convexPolyhedronRepresentation.id=e.id,this.planeConvex(t,e.convexPolyhedronRepresentation,i,s,o,n,r,a,t,e,c)}convexConvex(t,e,i,s,o,n,r,a,l,h,c,u,d){const p=Yi;if(!(i.distanceTo(s)>t.boundingSphereRadius+e.boundingSphereRadius)&&t.findSeparatingAxis(e,i,o,s,n,p,u,d)){const u=[],d=Xi;t.clipAgainstHull(i,o,e,s,n,p,-100,100,u);let y=0;for(let o=0;o!==u.length;o++){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h),v=n.ri,f=n.rj;p.negate(n.ni),u[o].normal.negate(d),d.scale(u[o].depth,d),u[o].point.vadd(d,v),f.copy(u[o].point),v.vsub(i,v),f.vsub(s,f),v.vadd(i,v),v.vsub(r.position,v),f.vadd(s,f),f.vsub(a.position,f),this.result.push(n),y++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(n,this.frictionResult)}this.enableFrictionReduction&&y&&this.createFrictionFromAverage(y)}}sphereConvex(t,e,i,s,o,n,r,a,l,h,c){const u=this.v3pool;i.vsub(s,Ti);const d=e.faceNormals,p=e.faces,y=e.vertices,v=t.radius;let f=!1;for(let m=0;m!==y.length;m++){const o=y[m],u=ji;n.vmult(o,u),s.vadd(u,u);const d=Li;if(u.vsub(i,d),d.lengthSquared()<v*v){if(c)return!0;f=!0;const o=this.createContactEquation(r,a,t,e,l,h);return o.ri.copy(d),o.ri.normalize(),o.ni.copy(o.ri),o.ri.scale(v,o.ri),u.vsub(s,o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),void this.createFrictionEquationsFromContact(o,this.frictionResult)}}for(let m=0,w=p.length;m!==w&&!1===f;m++){const o=d[m],w=p[m],g=Oi;n.vmult(o,g);const x=ki;n.vmult(y[w[0]],x),x.vadd(s,x);const b=Wi;g.scale(-v,b),i.vadd(b,b);const E=Vi;b.vsub(x,E);const z=E.dot(g),S=Hi;if(i.vsub(x,S),z<0&&S.dot(g)>0){const o=[];for(let t=0,e=w.length;t!==e;t++){const e=u.get();n.vmult(y[w[t]],e),s.vadd(e,e),o.push(e)}if(zi(o,g,i)){if(c)return!0;f=!0;const n=this.createContactEquation(r,a,t,e,l,h);g.scale(-v,n.ri),g.negate(n.ni);const d=u.get();g.scale(-z,d);const p=u.get();g.scale(-v,p),i.vsub(s,n.rj),n.rj.vadd(p,n.rj),n.rj.vadd(d,n.rj),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),u.release(d),u.release(p),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)u.release(o[t]);return}for(let d=0;d!==w.length;d++){const p=u.get(),f=u.get();n.vmult(y[w[(d+1)%w.length]],p),n.vmult(y[w[(d+2)%w.length]],f),s.vadd(p,p),s.vadd(f,f);const m=Pi;f.vsub(p,m);const g=Ii;m.unit(g);const x=u.get(),b=u.get();i.vsub(p,b);const E=b.dot(g);g.scale(E,x),x.vadd(p,x);const z=u.get();if(x.vsub(i,z),E>0&&E*E<m.lengthSquared()&&z.lengthSquared()<v*v){if(c)return!0;const n=this.createContactEquation(r,a,t,e,l,h);x.vsub(s,n.rj),x.vsub(i,n.ni),n.ni.normalize(),n.ni.scale(v,n.ri),n.rj.vadd(s,n.rj),n.rj.vsub(a.position,n.rj),n.ri.vadd(i,n.ri),n.ri.vsub(r.position,n.ri),this.result.push(n),this.createFrictionEquationsFromContact(n,this.frictionResult);for(let t=0,e=o.length;t!==e;t++)u.release(o[t]);return u.release(p),u.release(f),u.release(x),u.release(z),void u.release(b)}u.release(p),u.release(f),u.release(x),u.release(z),u.release(b)}for(let t=0,e=o.length;t!==e;t++)u.release(o[t])}}}planeConvex(t,e,i,s,o,n,r,a,l,h,c){const u=Di,d=Gi;d.set(0,0,1),o.vmult(d,d);let p=0;const y=_i;for(let v=0;v!==e.vertices.length;v++){u.copy(e.vertices[v]),n.vmult(u,u),s.vadd(u,u),u.vsub(i,y);if(d.dot(y)<=0){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h),n=Ui;d.scale(d.dot(y),n),u.vsub(n,n),n.vsub(i,o.ri),o.ni.copy(d),u.vsub(s,o.rj),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),o.rj.vadd(s,o.rj),o.rj.vsub(a.position,o.rj),this.result.push(o),p++,this.enableFrictionReduction||this.createFrictionEquationsFromContact(o,this.frictionResult)}}this.enableFrictionReduction&&p&&this.createFrictionFromAverage(p)}boxConvex(t,e,i,s,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexConvex(t.convexPolyhedronRepresentation,e,i,s,o,n,r,a,t,e,c)}sphereHeightfield(t,e,i,s,o,n,r,a,l,h,c){const u=e.data,d=t.radius,p=e.elementSize,y=ls,v=as;w.pointToLocalFrame(s,n,i,v);let f=Math.floor((v.x-d)/p)-1,m=Math.ceil((v.x+d)/p)+1,g=Math.floor((v.y-d)/p)-1,x=Math.ceil((v.y+d)/p)+1;if(m<0||x<0||f>u.length||g>u[0].length)return;f<0&&(f=0),m<0&&(m=0),g<0&&(g=0),x<0&&(x=0),f>=u.length&&(f=u.length-1),m>=u.length&&(m=u.length-1),x>=u[0].length&&(x=u[0].length-1),g>=u[0].length&&(g=u[0].length-1);const b=[];e.getRectMinMax(f,g,m,x,b);const E=b[0],z=b[1];if(v.z-d>z||v.z+d<E)return;const S=this.result;for(let B=f;B<m;B++)for(let l=g;l<x;l++){const h=S.length;let u=!1;if(e.getConvexTrianglePillar(B,l,!1),w.pointToWorldFrame(s,n,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.sphereConvex(t,e.pillarConvex,i,y,o,n,r,a,t,e,c)),c&&u)return!0;if(e.getConvexTrianglePillar(B,l,!0),w.pointToWorldFrame(s,n,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(u=this.sphereConvex(t,e.pillarConvex,i,y,o,n,r,a,t,e,c)),c&&u)return!0;if(S.length-h>2)return}}boxHeightfield(t,e,i,s,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexHeightfield(t.convexPolyhedronRepresentation,e,i,s,o,n,r,a,t,e,c)}convexHeightfield(t,e,i,s,o,n,r,a,l,h,c){const u=e.data,d=e.elementSize,p=t.boundingSphereRadius,y=ns,v=rs,f=os;w.pointToLocalFrame(s,n,i,f);let m=Math.floor((f.x-p)/d)-1,g=Math.ceil((f.x+p)/d)+1,x=Math.floor((f.y-p)/d)-1,b=Math.ceil((f.y+p)/d)+1;if(g<0||b<0||m>u.length||x>u[0].length)return;m<0&&(m=0),g<0&&(g=0),x<0&&(x=0),b<0&&(b=0),m>=u.length&&(m=u.length-1),g>=u.length&&(g=u.length-1),b>=u[0].length&&(b=u[0].length-1),x>=u[0].length&&(x=u[0].length-1);const E=[];e.getRectMinMax(m,x,g,b,E);const z=E[0],S=E[1];if(!(f.z-p>S||f.z+p<z))for(let B=m;B<g;B++)for(let l=x;l<b;l++){let h=!1;if(e.getConvexTrianglePillar(B,l,!1),w.pointToWorldFrame(s,n,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(h=this.convexConvex(t,e.pillarConvex,i,y,o,n,r,a,null,null,c,v,null)),c&&h)return!0;if(e.getConvexTrianglePillar(B,l,!0),w.pointToWorldFrame(s,n,e.pillarOffset,y),i.distanceTo(y)<e.pillarConvex.boundingSphereRadius+t.boundingSphereRadius&&(h=this.convexConvex(t,e.pillarConvex,i,y,o,n,r,a,null,null,c,v,null)),c&&h)return!0}}sphereParticle(t,e,i,s,o,n,r,a,l,h,c){const u=Ji;u.set(0,0,1),s.vsub(i,u);if(u.lengthSquared()<=t.radius*t.radius){if(c)return!0;const i=this.createContactEquation(a,r,e,t,l,h);u.normalize(),i.rj.copy(u),i.rj.scale(t.radius,i.rj),i.ni.copy(u),i.ni.negate(i.ni),i.ri.set(0,0,0),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}planeParticle(t,e,i,s,o,n,r,a,l,h,c){const u=Zi;u.set(0,0,1),r.quaternion.vmult(u,u);const d=Ki;s.vsub(r.position,d);if(u.dot(d)<=0){if(c)return!0;const i=this.createContactEquation(a,r,e,t,l,h);i.ni.copy(u),i.ni.negate(i.ni),i.ri.set(0,0,0);const o=Qi;u.scale(u.dot(s),o),s.vsub(o,o),i.rj.copy(o),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}boxParticle(t,e,i,s,o,n,r,a,l,h,c){return t.convexPolyhedronRepresentation.material=t.material,t.convexPolyhedronRepresentation.collisionResponse=t.collisionResponse,this.convexParticle(t.convexPolyhedronRepresentation,e,i,s,o,n,r,a,t,e,c)}convexParticle(t,e,i,s,o,n,r,a,l,h,c){let u=-1;const d=es,p=ss;let y=null;const v=ts;if(v.copy(s),v.vsub(i,v),o.conjugate($i),$i.vmult(v,v),t.pointIsInside(v)){t.worldVerticesNeedsUpdate&&t.computeWorldVertices(i,o),t.worldFaceNormalsNeedsUpdate&&t.computeWorldFaceNormals(o);for(let e=0,i=t.faces.length;e!==i;e++){const i=[t.worldVertices[t.faces[e][0]]],o=t.worldFaceNormals[e];s.vsub(i[0],is);const n=-o.dot(is);if(null===y||Math.abs(n)<Math.abs(y)){if(c)return!0;y=n,u=e,d.copy(o)}}if(-1!==u){const o=this.createContactEquation(a,r,e,t,l,h);d.scale(y,p),p.vadd(s,p),p.vsub(i,p),o.rj.copy(p),d.negate(o.ni),o.ri.set(0,0,0);const n=o.ri,c=o.rj;n.vadd(s,n),n.vsub(a.position,n),c.vadd(i,c),c.vsub(r.position,c),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}else console.warn("Point found inside convex, but did not find penetrating face!")}}heightfieldCylinder(t,e,i,s,o,n,r,a,l,h,c){return this.convexHeightfield(e,t,s,i,n,o,a,r,l,h,c)}particleCylinder(t,e,i,s,o,n,r,a,l,h,c){return this.convexParticle(e,t,s,i,n,o,a,r,l,h,c)}sphereTrimesh(t,e,i,s,o,n,r,a,l,h,c){const u=ai,d=li,p=hi,y=ci,v=ui,f=di,m=fi,g=ri,x=oi,b=mi;w.pointToLocalFrame(s,n,i,v);const E=t.radius;m.lowerBound.set(v.x-E,v.y-E,v.z-E),m.upperBound.set(v.x+E,v.y+E,v.z+E),e.getTrianglesInAABB(m,b);const z=ni,S=t.radius*t.radius;for(let F=0;F<b.length;F++)for(let o=0;o<3;o++)if(e.getVertex(e.indices[3*b[F]+o],z),z.vsub(v,x),x.lengthSquared()<=S){if(g.copy(z),w.pointToWorldFrame(s,n,g,z),z.vsub(i,x),c)return!0;let o=this.createContactEquation(r,a,t,e,l,h);o.ni.copy(x),o.ni.normalize(),o.ri.copy(o.ni),o.ri.scale(t.radius,o.ri),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),o.rj.copy(z),o.rj.vsub(a.position,o.rj),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}for(let F=0;F<b.length;F++)for(let o=0;o<3;o++){e.getVertex(e.indices[3*b[F]+o],u),e.getVertex(e.indices[3*b[F]+(o+1)%3],d),d.vsub(u,p),v.vsub(d,f);const m=f.dot(p);v.vsub(u,f);let g=f.dot(p);if(g>0&&m<0){v.vsub(u,f),y.copy(p),y.normalize(),g=f.dot(y),y.scale(g,f),f.vadd(u,f);if(f.distanceTo(v)<t.radius){if(c)return!0;const o=this.createContactEquation(r,a,t,e,l,h);f.vsub(v,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),w.pointToWorldFrame(s,n,f,f),f.vsub(a.position,o.rj),w.vectorToWorldFrame(n,o.ni,o.ni),w.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}}const B=pi,A=yi,C=vi,M=si;for(let F=0,N=b.length;F!==N;F++){e.getTriangleVertices(b[F],B,A,C),e.getNormal(b[F],M),v.vsub(B,f);let o=f.dot(M);if(M.scale(o,f),v.vsub(f,f),o=f.distanceTo(v),ut.pointInTriangle(f,B,A,C)&&o<t.radius){if(c)return!0;let o=this.createContactEquation(r,a,t,e,l,h);f.vsub(v,o.ni),o.ni.normalize(),o.ni.scale(t.radius,o.ri),o.ri.vadd(i,o.ri),o.ri.vsub(r.position,o.ri),w.pointToWorldFrame(s,n,f,f),f.vsub(a.position,o.rj),w.vectorToWorldFrame(n,o.ni,o.ni),w.vectorToWorldFrame(n,o.ri,o.ri),this.result.push(o),this.createFrictionEquationsFromContact(o,this.frictionResult)}}b.length=0}planeTrimesh(t,e,i,s,o,r,a,l,h,c,u){const d=new n,p=ti;p.set(0,0,1),o.vmult(p,p);for(let y=0;y<e.vertices.length/3;y++){e.getVertex(y,d);const o=new n;o.copy(d),w.pointToWorldFrame(s,r,o,d);const v=ei;d.vsub(i,v);if(p.dot(v)<=0){if(u)return!0;const i=this.createContactEquation(a,l,t,e,h,c);i.ni.copy(p);const s=ii;p.scale(v.dot(p),s),d.vsub(s,s),i.ri.copy(s),i.ri.vsub(a.position,i.ri),i.rj.copy(d),i.rj.vsub(l.position,i.rj),this.result.push(i),this.createFrictionEquationsFromContact(i,this.frictionResult)}}}}const Ye=new n,Xe=new n,Ze=new n,Ke=new n,Qe=new n,Je=new y,$e=new y,ti=new n,ei=new n,ii=new n,si=new n,oi=new n;new n;const ni=new n,ri=new n,ai=new n,li=new n,hi=new n,ci=new n,ui=new n,di=new n,pi=new n,yi=new n,vi=new n,fi=new h,mi=[],wi=new n,gi=new n,xi=new n,bi=new n,Ei=new n;function zi(t,e,i){let s=null;const o=t.length;for(let n=0;n!==o;n++){const r=t[n],a=xi;t[(n+1)%o].vsub(r,a);const l=bi;a.cross(e,l);const h=Ei;i.vsub(r,h);const c=l.dot(h);if(!(null===s||c>0&&!0===s||c<=0&&!1===s))return!1;null===s&&(s=c>0)}return!0}const Si=new n,Bi=new n,Ai=new n,Ci=new n,Mi=[new n,new n,new n,new n,new n,new n],Fi=new n,Ni=new n,qi=new n,Ri=new n,Ti=new n,Pi=new n,Ii=new n,Li=new n,ji=new n,Oi=new n,ki=new n,Wi=new n,Vi=new n,Hi=new n;new n,new n;const Di=new n,Gi=new n,_i=new n,Ui=new n,Yi=new n,Xi=new n,Zi=new n,Ki=new n,Qi=new n,Ji=new n,$i=new y,ts=new n;new n;const es=new n,is=new n,ss=new n,os=new n,ns=new n,rs=[0],as=new n,ls=new n;class hs{constructor(){this.current=[],this.previous=[]}getKey(t,e){if(e<t){const i=e;e=t,t=i}return t<<16|e}set(t,e){const i=this.getKey(t,e),s=this.current;let o=0;for(;i>s[o];)o++;if(i!==s[o]){for(let t=s.length-1;t>=o;t--)s[t+1]=s[t];s[o]=i}}tick(){const t=this.current;this.current=this.previous,this.previous=t,this.current.length=0}getDiff(t,e){const i=this.current,s=this.previous,o=i.length,n=s.length;let r=0;for(let a=0;a<o;a++){let e=!1;const o=i[a];for(;o>s[r];)r++;e=o===s[r],e||cs(t,o)}r=0;for(let a=0;a<n;a++){let t=!1;const o=s[a];for(;o>i[r];)r++;t=i[r]===o,t||cs(e,o)}}}function cs(t,e){t.push((4294901760&e)>>16,65535&e)}const us=(t,e)=>t<e?"".concat(t,"-").concat(e):"".concat(e,"-").concat(t);class ds{constructor(){this.data={keys:[]}}get(t,e){const i=us(t,e);return this.data[i]}set(t,e,i){const s=us(t,e);this.get(t,e)||this.data.keys.push(s),this.data[s]=i}delete(t,e){const i=us(t,e),s=this.data.keys.indexOf(i);-1!==s&&this.data.keys.splice(s,1),delete this.data[i]}reset(){const t=this.data,e=t.keys;for(;e.length>0;){delete t[e.pop()]}}}class ps extends p{constructor(t){void 0===t&&(t={}),super(),this.dt=-1,this.allowSleep=!!t.allowSleep,this.contacts=[],this.frictionEquations=[],this.quatNormalizeSkip=void 0!==t.quatNormalizeSkip?t.quatNormalizeSkip:0,this.quatNormalizeFast=void 0!==t.quatNormalizeFast&&t.quatNormalizeFast,this.time=0,this.stepnumber=0,this.default_dt=1/60,this.nextId=0,this.gravity=new n,t.gravity&&this.gravity.copy(t.gravity),t.frictionGravity&&(this.frictionGravity=new n,this.frictionGravity.copy(t.frictionGravity)),this.broadphase=void 0!==t.broadphase?t.broadphase:new $,this.bodies=[],this.hasActiveBodies=!1,this.solver=void 0!==t.solver?t.solver:new ve,this.constraints=[],this.narrowphase=new Ue(this),this.collisionMatrix=new d,this.collisionMatrixPrevious=new d,this.bodyOverlapKeeper=new hs,this.shapeOverlapKeeper=new hs,this.contactmaterials=[],this.contactMaterialTable=new ds,this.defaultMaterial=new ce("default"),this.defaultContactMaterial=new he(this.defaultMaterial,this.defaultMaterial,{friction:.3,restitution:0}),this.doProfiling=!1,this.profile={solve:0,makeContactConstraints:0,broadphase:0,integrate:0,narrowphase:0},this.accumulator=0,this.subsystems=[],this.addBodyEvent={type:"addBody",body:null},this.removeBodyEvent={type:"removeBody",body:null},this.idToBodyMap={},this.broadphase.setWorld(this)}getContactMaterial(t,e){return this.contactMaterialTable.get(t.id,e.id)}collisionMatrixTick(){const t=this.collisionMatrixPrevious;this.collisionMatrixPrevious=this.collisionMatrix,this.collisionMatrix=t,this.collisionMatrix.reset(),this.bodyOverlapKeeper.tick(),this.shapeOverlapKeeper.tick()}addConstraint(t){this.constraints.push(t)}removeConstraint(t){const e=this.constraints.indexOf(t);-1!==e&&this.constraints.splice(e,1)}rayTest(t,e,i){i instanceof tt?this.raycastClosest(t,e,{skipBackfaces:!0},i):this.raycastAll(t,e,{skipBackfaces:!0},i)}raycastAll(t,e,i,s){return void 0===i&&(i={}),i.mode=ut.ALL,i.from=t,i.to=e,i.callback=s,ys.intersectWorld(this,i)}raycastAny(t,e,i,s){return void 0===i&&(i={}),i.mode=ut.ANY,i.from=t,i.to=e,i.result=s,ys.intersectWorld(this,i)}raycastClosest(t,e,i,s){return void 0===i&&(i={}),i.mode=ut.CLOSEST,i.from=t,i.to=e,i.result=s,ys.intersectWorld(this,i)}addBody(t){this.bodies.includes(t)||(t.index=this.bodies.length,this.bodies.push(t),t.world=this,t.initPosition.copy(t.position),t.initVelocity.copy(t.velocity),t.timeLastSleepy=this.time,t instanceof P&&(t.initAngularVelocity.copy(t.angularVelocity),t.initQuaternion.copy(t.quaternion)),this.collisionMatrix.setNumObjects(this.bodies.length),this.addBodyEvent.body=t,this.idToBodyMap[t.id]=t,this.dispatchEvent(this.addBodyEvent))}removeBody(t){t.world=null;const e=this.bodies.length-1,i=this.bodies,s=i.indexOf(t);if(-1!==s){i.splice(s,1);for(let t=0;t!==i.length;t++)i[t].index=t;this.collisionMatrix.setNumObjects(e),this.removeBodyEvent.body=t,delete this.idToBodyMap[t.id],this.dispatchEvent(this.removeBodyEvent)}}getBodyById(t){return this.idToBodyMap[t]}getShapeById(t){const e=this.bodies;for(let i=0;i<e.length;i++){const s=e[i].shapes;for(let e=0;e<s.length;e++){const i=s[e];if(i.id===t)return i}}return null}addContactMaterial(t){this.contactmaterials.push(t),this.contactMaterialTable.set(t.materials[0].id,t.materials[1].id,t)}removeContactMaterial(t){const e=this.contactmaterials.indexOf(t);-1!==e&&(this.contactmaterials.splice(e,1),this.contactMaterialTable.delete(t.materials[0].id,t.materials[1].id))}fixedStep(t,e){void 0===t&&(t=1/60),void 0===e&&(e=10);const i=vs.now()/1e3;if(this.lastCallTime){const s=i-this.lastCallTime;this.step(t,s,e)}else this.step(t,void 0,e);this.lastCallTime=i}step(t,e,i){if(void 0===i&&(i=10),void 0===e)this.internalStep(t),this.time+=t;else{this.accumulator+=e;const s=vs.now();let o=0;for(;this.accumulator>=t&&o<i&&(this.internalStep(t),this.accumulator-=t,o++,!(vs.now()-s>1e3*t)););this.accumulator=this.accumulator%t;const n=this.accumulator/t;for(let t=0;t!==this.bodies.length;t++){const e=this.bodies[t];e.previousPosition.lerp(e.position,n,e.interpolatedPosition),e.previousQuaternion.slerp(e.quaternion,n,e.interpolatedQuaternion),e.previousQuaternion.normalize()}this.time+=e}}internalStep(t){this.dt=t;const e=this.contacts,i=bs,s=Es,o=this.bodies.length,n=this.bodies,r=this.solver,a=this.gravity,l=this.doProfiling,h=this.profile,c=P.DYNAMIC;let u=-1/0;const d=this.constraints,p=xs;a.length();const y=a.x,v=a.y,f=a.z;let m=0;for(l&&(u=vs.now()),m=0;m!==o;m++){const t=n[m];if(t.type===c){const e=t.force,i=t.mass;e.x+=i*y,e.y+=i*v,e.z+=i*f}}for(let C=0,M=this.subsystems.length;C!==M;C++)this.subsystems[C].update();l&&(u=vs.now()),i.length=0,s.length=0,this.broadphase.collisionPairs(this,i,s),l&&(h.broadphase=vs.now()-u);let w=d.length;for(m=0;m!==w;m++){const t=d[m];if(!t.collideConnected)for(let e=i.length-1;e>=0;e-=1)(t.bodyA===i[e]&&t.bodyB===s[e]||t.bodyB===i[e]&&t.bodyA===s[e])&&(i.splice(e,1),s.splice(e,1))}this.collisionMatrixTick(),l&&(u=vs.now());const g=gs,x=e.length;for(m=0;m!==x;m++)g.push(e[m]);e.length=0;const b=this.frictionEquations.length;for(m=0;m!==b;m++)p.push(this.frictionEquations[m]);for(this.frictionEquations.length=0,this.narrowphase.getContacts(i,s,this,e,g,this.frictionEquations,p),l&&(h.narrowphase=vs.now()-u),l&&(u=vs.now()),m=0;m<this.frictionEquations.length;m++)r.addEquation(this.frictionEquations[m]);const E=e.length;for(let C=0;C!==E;C++){const t=e[C],i=t.bi,s=t.bj,o=t.si,n=t.sj;let a;if(a=i.material&&s.material&&this.getContactMaterial(i.material,s.material)||this.defaultContactMaterial,a.friction,i.material&&s.material&&(i.material.friction>=0&&s.material.friction>=0&&(i.material.friction,s.material.friction),i.material.restitution>=0&&s.material.restitution>=0&&(t.restitution=i.material.restitution*s.material.restitution)),r.addEquation(t),i.allowSleep&&i.type===P.DYNAMIC&&i.sleepState===P.SLEEPING&&s.sleepState===P.AWAKE&&s.type!==P.STATIC){s.velocity.lengthSquared()+s.angularVelocity.lengthSquared()>=2*s.sleepSpeedLimit**2&&(i.wakeUpAfterNarrowphase=!0)}if(s.allowSleep&&s.type===P.DYNAMIC&&s.sleepState===P.SLEEPING&&i.sleepState===P.AWAKE&&i.type!==P.STATIC){i.velocity.lengthSquared()+i.angularVelocity.lengthSquared()>=2*i.sleepSpeedLimit**2&&(s.wakeUpAfterNarrowphase=!0)}this.collisionMatrix.set(i,s,!0),this.collisionMatrixPrevious.get(i,s)||(ws.body=s,ws.contact=t,i.dispatchEvent(ws),ws.body=i,s.dispatchEvent(ws)),this.bodyOverlapKeeper.set(i.id,s.id),this.shapeOverlapKeeper.set(o.id,n.id)}for(this.emitContactEvents(),l&&(h.makeContactConstraints=vs.now()-u,u=vs.now()),m=0;m!==o;m++){const t=n[m];t.wakeUpAfterNarrowphase&&(t.wakeUp(),t.wakeUpAfterNarrowphase=!1)}for(w=d.length,m=0;m!==w;m++){const t=d[m];t.update();for(let e=0,i=t.equations.length;e!==i;e++){const i=t.equations[e];r.addEquation(i)}}r.solve(t,this),l&&(h.solve=vs.now()-u),r.removeAllEquations();const z=Math.pow;for(m=0;m!==o;m++){const e=n[m];if(e.type&c){const i=z(1-e.linearDamping,t),s=e.velocity;s.scale(i,s);const o=e.angularVelocity;if(o){const i=z(1-e.angularDamping,t);o.scale(i,o)}}}this.dispatchEvent(ms),l&&(u=vs.now());const S=this.stepnumber%(this.quatNormalizeSkip+1)===0,B=this.quatNormalizeFast;for(m=0;m!==o;m++)n[m].integrate(t,S,B);this.clearForces(),this.broadphase.dirty=!0,l&&(h.integrate=vs.now()-u),this.stepnumber+=1,this.dispatchEvent(fs);let A=!0;if(this.allowSleep)for(A=!1,m=0;m!==o;m++){const t=n[m];t.sleepTick(this.time),t.sleepState!==P.SLEEPING&&(A=!0)}this.hasActiveBodies=A}emitContactEvents(){const t=this.hasAnyEventListener("beginContact"),e=this.hasAnyEventListener("endContact");if((t||e)&&this.bodyOverlapKeeper.getDiff(zs,Ss),t){for(let t=0,e=zs.length;t<e;t+=2)Bs.bodyA=this.getBodyById(zs[t]),Bs.bodyB=this.getBodyById(zs[t+1]),this.dispatchEvent(Bs);Bs.bodyA=Bs.bodyB=null}if(e){for(let t=0,e=Ss.length;t<e;t+=2)As.bodyA=this.getBodyById(Ss[t]),As.bodyB=this.getBodyById(Ss[t+1]),this.dispatchEvent(As);As.bodyA=As.bodyB=null}zs.length=Ss.length=0;const i=this.hasAnyEventListener("beginShapeContact"),s=this.hasAnyEventListener("endShapeContact");if((i||s)&&this.shapeOverlapKeeper.getDiff(zs,Ss),i){for(let t=0,e=zs.length;t<e;t+=2){const e=this.getShapeById(zs[t]),i=this.getShapeById(zs[t+1]);Cs.shapeA=e,Cs.shapeB=i,e&&(Cs.bodyA=e.body),i&&(Cs.bodyB=i.body),this.dispatchEvent(Cs)}Cs.bodyA=Cs.bodyB=Cs.shapeA=Cs.shapeB=null}if(s){for(let t=0,e=Ss.length;t<e;t+=2){const e=this.getShapeById(Ss[t]),i=this.getShapeById(Ss[t+1]);Ms.shapeA=e,Ms.shapeB=i,e&&(Ms.bodyA=e.body),i&&(Ms.bodyB=i.body),this.dispatchEvent(Ms)}Ms.bodyA=Ms.bodyB=Ms.shapeA=Ms.shapeB=null}}clearForces(){const t=this.bodies,e=t.length;for(let i=0;i!==e;i++){const e=t[i];e.force,e.torque,e.force.set(0,0,0),e.torque.set(0,0,0)}}}new h;const ys=new ut,vs=globalThis.performance||{};if(!vs.now){let t=Date.now();vs.timing&&vs.timing.navigationStart&&(t=vs.timing.navigationStart),vs.now=()=>Date.now()-t}new n;const fs={type:"postStep"},ms={type:"preStep"},ws={type:P.COLLIDE_EVENT_NAME,body:null,contact:null},gs=[],xs=[],bs=[],Es=[],zs=[],Ss=[],Bs={type:"beginContact",bodyA:null,bodyB:null},As={type:"endContact",bodyA:null,bodyB:null},Cs={type:"beginShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null},Ms={type:"endShapeContact",bodyA:null,bodyB:null,shapeA:null,shapeB:null}}}]);
//# sourceMappingURL=789.f60beef6.chunk.js.map